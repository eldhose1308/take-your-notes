{"version":3,"file":"static/js/916.82e4717c.chunk.js","mappings":"0OAGA,MAuBA,EAvBoBA,IAAiC,IAAhC,MAAEC,EAAQ,GAAE,MAAEC,EAAQ,IAAIF,EAC3C,MAAMG,EAAcF,EAAMG,OAAS,EAEnC,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8DAA6DC,SACvEN,EAAMO,KAAI,CAACC,EAAMC,KACd,MAAMC,EAAaD,IAAUP,EAC7B,OACIS,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAN,SAAA,CACVL,EAAMQ,IAASL,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACC,GAAIb,EAAMQ,GAAOH,UACnCF,EAAAA,EAAAA,KAAA,QAAMC,UAAS,GAAAU,OAAML,EAAkB,eAAL,IAAsBJ,SAAEE,OACpDJ,EAAAA,EAAAA,KAAA,QAAMC,UAAS,GAAAU,OAAML,EAAkB,eAAL,IAAsBJ,SAAEE,KAClEE,IAAeN,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sCAAqCC,UAClEF,EAAAA,EAAAA,KAAA,OAAKY,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQnB,UAAU,8BAA6BC,UAACF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,wBAGzN,KAGvB,C,iCCtBP,MAAMC,EAAe,CACxBC,WAAY,aACZC,SAAU,WACVC,eAAgB,iBAChBC,YAAa,cACbC,UAAW,YACXC,aAAc,eACdC,WAAY,a,kECPT,MAAMC,EAAmB,CAC5BC,QAAS,UACTC,OAAQ,UAGCC,EAAkB,CAC3B,CAAEC,GAAIJ,EAAiBC,QAASI,MAAO,UAAWC,aAAa7B,EAAAA,EAAAA,MAAA,OAAKK,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQnB,UAAU,wBAAuBC,SAAA,EAACF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,oGAAkGrB,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,0CAAwCrB,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,kGAAgGrB,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,mBAC7hB,CAAEa,GAAIJ,EAAiBE,OAAQG,MAAO,SAAUC,aAAa7B,EAAAA,EAAAA,MAAA,OAAKK,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQnB,UAAU,oBAAmBC,SAAA,EAACF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,2GAAyGrB,EAAAA,EAAAA,KAAA,UAAQqC,GAAG,KAAKC,GAAG,KAAKC,EAAE,WAG/YC,EAAmB,e,2GCPzB,MAAMC,EAAe,CACxBC,SAAU,GACVC,sBAAuBb,EAAAA,GAAiBE,OACxCY,UAAWJ,EAAAA,GACXK,aAAc,KACdC,gBAAiB,IAyBrB,EArBwBC,CAACC,EAAKrD,KAAyB,IAAvB,KAAEsD,EAAI,QAAEC,GAASvD,EAC7C,OAAQsD,GACJ,KAAK3B,EAAAA,EAAaC,WACd,MAAO,IAAKyB,KAAUE,GAC1B,KAAK5B,EAAAA,EAAaE,SACd,MAAO,IAAKwB,EAAON,SAAUQ,GACjC,KAAK5B,EAAAA,EAAaG,eACd,MAAO,IAAKuB,EAAOL,sBAAuBO,GAC9C,KAAK5B,EAAAA,EAAaI,YACd,MAAO,IAAKsB,EAAOF,gBAAiBI,GACxC,KAAK5B,EAAAA,EAAaK,UACd,MAAO,IAAKqB,EAAOJ,UAAWM,GAClC,KAAK5B,EAAAA,EAAaM,aACd,MAAO,IAAKoB,EAAOH,aAAcK,GACrC,KAAK5B,EAAAA,EAAaO,WACd,OAAOY,EACX,QACI,OAAOO,EACf,E,yCCfJ,MAiPA,EAjPmBG,KACf,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,OAChCpB,GAAIqB,IAAaC,EAAAA,EAAAA,OAEnB,MAAEC,IAAUC,EAAAA,EAAAA,MACZ,OAAEC,IAAWC,EAAAA,EAAAA,MAGZC,EAAeC,IAAsBC,EAAAA,EAAAA,YAAWhB,EAAiB,IAAKN,KAEtEuB,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,QAwCzCC,GAAaC,EAAAA,EAAAA,cAAYC,UAC3B,IACI,MAAMC,QAAsBC,EAAAA,GAAerB,GAQ3C,OALAO,EAAM,CACFe,QAAS,6BACTC,YAAa,6CACbC,QAAS,CAAEC,SAAU,eACtBC,UACIN,CACX,CAAE,MAAOO,GACL,MAAM,QAAEC,EAAO,WAAEC,GAAeF,EAShC,OARkB,MAAfE,GACCpB,IAEJF,EAAM,CACFe,QAAS,+CACTC,YAAaK,EACbJ,QAAS,CAAEC,SAAU,eACtBE,SACI,CACX,IACD,IAEGG,GAAaZ,EAAAA,EAAAA,cAAYC,MAAOnB,EAAShB,KAC3C,IACI,MAAMoC,QAAsBC,EAAAA,GAAiBrB,EAAShB,GAatD,OALAuB,EAAM,CACFe,QAAS,6BACTC,YAAa,2CACbC,QAAS,CAAEC,SAAU,eACtBC,UACIN,CACX,CAAE,MAAOO,GACL,MAAM,QAAEC,GAAYD,EAMpB,OALApB,EAAM,CACFe,QAAS,+CACTC,YAAaK,EACbJ,QAAS,CAAEC,SAAU,eACtBE,SACI,CACX,IACD,IAEGI,GAAab,EAAAA,EAAAA,cAAYC,UAC3B,IACI,MAAMC,QAAsBC,EAAAA,GAAiBrC,GAM7C,OALAuB,EAAM,CACFe,QAAS,6BACTC,YAAa,2CACbC,QAAS,CAAEC,SAAU,eACtBC,UACIN,CACX,CAAE,MAAOO,GACL,MAAM,QAAEC,EAAO,WAAEC,GAAeF,EAShC,MARkB,MAAfE,GACCpB,IAEJF,EAAM,CACFe,QAAS,+CACTC,YAAaK,EACbJ,QAAS,CAAEC,SAAU,eACtBE,QACGA,CAEV,IACD,IAEGK,GAAcd,EAAAA,EAAAA,cAAYC,UAC5B,IACI,MAAMC,QAAsBC,EAAAA,GAAkBrC,GAM9C,OALAuB,EAAM,CACFe,QAAS,8BACTC,YAAa,4CACbC,QAAS,CAAEC,SAAU,eACtBC,UACIN,CACX,CAAE,MAAOO,GACL,MAAM,QAAEC,GAAYD,EAMpB,MALApB,EAAM,CACFe,QAAS,gDACTC,YAAaK,EACbJ,QAAS,CAAEC,SAAU,eACtBE,QACGA,CAEV,IACD,IA4EH,OANAM,EAAAA,EAAAA,YAAU,QAIP,CAAC5B,IAEG,CAMH6B,oBAhMwBf,UACxB,IACIJ,EAAe,WACf,MAAMoB,QAAuBC,EAAAA,KAK7B,OAJArB,EAAe,WACfsB,YAAW,KACPtB,EAAe,OAAO,GACvB,KACIoB,CACX,CAAC,MAAMR,GACHZ,EAAe,UACnB,GAsLAuB,iBAxNqBnB,UACrB,IACIJ,EAAe,WACf,MAAMwB,QAAkBC,EAAAA,GAA0BC,GASlD,OARwB,IAArBF,EAAU1F,OACTkE,EAAe,UAEfA,EAAe,WACfsB,YAAW,KACPtB,EAAe,OAAO,GACvB,MAEAwB,CACX,CAAC,MAAMZ,GACH,MAAM,WAAEE,GAAeF,EAKvB,MAJkB,MAAfE,GACCpB,IAEJM,EAAe,WACTY,CACV,GAqMAe,mBAtCuBvB,UACvB,IAAKd,EACD,OAGJ,MAAM,SAAEsC,IAAaC,EAAAA,EAAAA,MACrB,IAEI7B,EAAe,WACf,MAAM8B,QAAsBL,EAAAA,GAA2B,CAAEG,WAAUtC,cAC3DrB,GAAI8D,EAAM,SAAEC,EAAQ,QAAEC,EAAO,UAAEtD,EAAS,WAAEuD,EAAU,KAAEC,GAASL,GAAiB,CAAC,GACnF,WAAEM,EAAU,aAAEC,EAAY,aAAEC,GAAiBN,GAAY,CAAC,GAC1D,SAAEO,EAAQ,OAAEC,GAAWL,GAAQ,CAAC,EAEhClD,EAAU,CAAE8C,SAAQlD,gBAAiBoD,EAAStD,YAAWD,sBAAuBwD,EAAYtD,aAAc,CAAEX,GAAImE,EAAYC,eAAcC,eAAcG,MAAOH,IAErKzC,EAAmB,CAAEb,KAAM3B,EAAAA,EAAaC,WAAY2B,YAEpDe,EAAe,UACnB,CAAE,MAAOY,GACLZ,EAAe,UACnB,GAmBA0C,SAhEatC,UACb,MAAOQ,EAAOC,GApBQ8B,KACtB,MAAM,SAAElE,EAAQ,sBAAEC,EAAqB,aAAEE,EAAY,UAAED,EAAS,gBAAEE,GAAoB8D,EACtF,OAAK/D,EAGAF,EAGAC,EAGAE,EAIE,EAAC,EAAO,IAHJ,EAAC,EAAM,2BAHP,EAAC,EAAM,yBAHP,EAAC,EAAM,mCAHP,EAAC,EAAM,sBAYA,EAKO+D,CAAiBhD,GAC1C,GAAGgB,EAMC,YALApB,EAAM,CACFe,QAAS,mCACTC,YAAaK,EACbJ,QAAS,CAAEC,SAAU,eACtBE,QAIP,MAAM,OAAEmB,EAAM,SAAEtD,EAAQ,sBAAEC,EAAqB,aAAEE,EAAY,UAAED,EAAS,gBAAEE,GAAoBe,EAIxF+C,EAAc,CAChBX,SAAUpD,EAAaX,GACvBgE,QAASpD,EACTgE,WAAYlE,EACZuD,WAAYxD,GAEhB,OAAOY,EAAWyB,EAAW4B,EAAaZ,GAAU7B,EAAWyC,EAAY,EA4C3E3B,aACAC,cAEArB,gBACAC,qBACAE,cACH,C,wNCzOL,MA2JA,EApHmB+C,KACf,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,MAErB,cAAEpD,EAAa,mBAAE+B,EAAkB,mBAAE9B,EAAkB,SAAE6C,EAAQ,YAAE3C,IAAgBb,EAAAA,EAAAA,MAEnF,SAAET,EAAQ,sBAAEC,EAAqB,aAAEE,EAAY,UAAED,EAAS,gBAAEE,GAAoBe,GAChF,aAAEyC,GAAiBzD,GAAgB,CAAC,EA8C1C,OAJAsC,EAAAA,EAAAA,YAAU,KACNS,GAAoB,GACrB,IAEiB,YAAhB5B,GACOzD,EAAAA,EAAAA,MAAA,OAAKN,UAAU,MAAKC,SAAA,EACvBF,EAAAA,EAAAA,KAACkH,EAAAA,GAAO,KACRlH,EAAAA,EAAAA,KAACkH,EAAAA,GAAO,KACRlH,EAAAA,EAAAA,KAACkH,EAAAA,GAAO,KACRlH,EAAAA,EAAAA,KAACkH,EAAAA,GAAO,KACRlH,EAAAA,EAAAA,KAACkH,EAAAA,GAAO,OAII,YAAhBlD,GACOhE,EAAAA,EAAAA,KAAA,OAAAE,SAAK,YAIZF,EAAAA,EAAAA,KAACQ,EAAAA,SAAc,CAAAN,UACXK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,mBAAkBC,SAAA,EAE7BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,yBAAwBC,SAAA,EACvCK,EAAAA,EAAAA,MAAC4G,EAAAA,EAAU,CAACC,KAAK,KAAKnE,KAAK,KAAKhD,UAAU,YAAWC,SAAA,CAAC,aACxCF,EAAAA,EAAAA,KAACqH,EAAAA,EAAW,QAQtBrH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+DAA8DC,UACzEF,EAAAA,EAAAA,KAACsH,EAAAA,EAAY,CAACrB,SAAUpD,EAAc0E,SAtCzBC,CAACtF,EAAIuF,KAClC3D,EAAmB,CAAEb,KAAM3B,EAAAA,EAAaM,aAAcsB,QAASuE,GAAS,UAwChElH,EAAAA,EAAAA,MAAA,OAAKN,UAAU,+BAA8BC,SAAA,EACzCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAChCF,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAAC0H,EAAAA,EAAW,CAAC9H,MAAO,CAAC0G,GAAgB,oBAAqB1D,UAMlErC,EAAAA,EAAAA,MAAA,OAAKN,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEC,UACbF,EAAAA,EAAAA,KAAC2H,EAAAA,EAAsB,CAACJ,SAjEZK,IAChC9D,EAAmB,CAAEb,KAAM3B,EAAAA,EAAaG,eAAgByB,QAAS0E,GAAU,EAgEOC,YAAalF,OAE/E3C,EAAAA,EAAAA,KAAA,OAAK8H,QArFNzD,gBACYsC,KAEvBpB,YAAW,KACPyB,GAAgB,GACjB,KACP,EA+E0C/G,UAAU,sJAAqJC,UACrLK,EAAAA,EAAAA,MAAA,QAAMN,UAAU,OAAMC,SAAA,CAAC,QAEnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mFAAkFC,SAAC,+BAKnHK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,oDAAmDC,SAAA,EAC9DF,EAAAA,EAAAA,KAAC+H,EAAAA,EAAY,CAAC9H,UAAU,4BAA4B+H,KAAMpF,EAAWqF,OAnEtDvB,IAC3B5C,EAAmB,CAAEb,KAAM3B,EAAAA,EAAaK,UAAWuB,QAASwD,GAAQ,KAmExD1G,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCAAgCC,UAC3CF,EAAAA,EAAAA,KAACkI,EAAAA,EAAc,CAAChC,QAASpD,EAAiByE,SAzEhCb,IAC1B5C,EAAmB,CAAEb,KAAM3B,EAAAA,EAAaI,YAAawB,QAASwD,GAAQ,EAwEoByB,kBAAgB,aAIzF,C","sources":["_components/UI/BreadCrumbs/BreadCrumbs.js","_modules/posts/_constants/postReducerActionTypes.js","_modules/posts/_constants/posts.js","_modules/posts/_hooks/usePostsReducer.js","_modules/posts/_hooks/useMyPosts.js","_pages/myPosts/form/MyPostForm.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst BreadCrumbs = ({ items = [], links = [] }) => {\n    const itemsLength = items.length - 1;\n\n    return (\n        <div className=\"flex rounded-lg px-2 my-2 text-xs bg-default text-secondary\">\n            {items.map((item, index) => {\n                const isLastItem = index === itemsLength;\n                return (\n                    <React.Fragment>\n                        {links[index] ? <Link to={links[index]}>\n                            <span className={`${!isLastItem ? '' : 'text-default'}`}>{item}</span>\n                        </Link> : <span className={`${!isLastItem ? '' : 'text-default'}`}>{item}</span>}\n                        {!isLastItem && (<span className=\"flex items-center text-default mx-1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-chevron-right\"><path d=\"m9 18 6-6-6-6\" /></svg>\n                        </span>\n                        )}\n                    </React.Fragment>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default BreadCrumbs;","export const POST_ACTIONS = {\n    SET_FIELDS: 'SET_FIELDS',\n    SET_TAGS: 'SET_TAGS',\n    SET_VISIBILITY: 'SET_VISIBILITY',\n    SET_CONTENT: 'SET_CONTENT',\n    SET_TITLE: 'SET_TITLE',\n    SET_CATEGORY: 'SET_CATEGORY',\n    RESET_FORM: 'RESET_FORM',\n};\n","export const VISIBILITY_MODES = {\n    private: 'private',\n    public: 'public'\n}\n\nexport const visibilityModes = [\n    { id: VISIBILITY_MODES.private, label: 'Private', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-eye-off\"><path d=\"M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49\"/><path d=\"M14.084 14.158a3 3 0 0 1-4.242-4.242\"/><path d=\"M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143\"/><path d=\"m2 2 20 20\"/></svg> },\n    { id: VISIBILITY_MODES.public, label: 'Public', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-eye\"><path d=\"M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg> },\n]\n\nexport const EMPTY_POST_TITLE = 'My First Post';","import { VISIBILITY_MODES, EMPTY_POST_TITLE } from \"../_constants/posts\";\nimport { POST_ACTIONS } from \"../_constants/postReducerActionTypes\";\n\nexport const initialState = {\n    postTags: [],\n    currentVisibilityMode: VISIBILITY_MODES.public,\n    postTitle: EMPTY_POST_TITLE,\n    postCategory: null,\n    markdownContent: '',\n};\n\n\nconst postFormReducer = (state, { type, payload }) => {\n    switch (type) {\n        case POST_ACTIONS.SET_FIELDS:\n            return { ...state, ...payload };\n        case POST_ACTIONS.SET_TAGS:\n            return { ...state, postTags: payload };\n        case POST_ACTIONS.SET_VISIBILITY:\n            return { ...state, currentVisibilityMode: payload };\n        case POST_ACTIONS.SET_CONTENT:\n            return { ...state, markdownContent: payload };\n        case POST_ACTIONS.SET_TITLE:\n            return { ...state, postTitle: payload };\n        case POST_ACTIONS.SET_CATEGORY:\n            return { ...state, postCategory: payload };\n        case POST_ACTIONS.RESET_FORM:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\nexport default postFormReducer\n","import { useState, useEffect, useContext, useCallback, useReducer } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, useSearchParams } from \"react-router-dom\";\n\nimport * as posts from \"_services/posts.service\";\nimport * as postsService from '_services/posts.service';\nimport * as categoriesService from '_services/postsCategories.service';\n\nimport postFormReducer, { initialState } from \"./usePostsReducer\";\nimport { PostsContext } from \"_contexts/PostsContext\";\nimport { POST_ACTIONS } from \"../_constants/postReducerActionTypes\";\nimport { useToast } from \"_contexts/ToastProvider\";\nimport { getUserDetailsOfCurrentUser } from \"_utils/userAuth\";\nimport useAuth from \"_hooks/useAuth\";\n\nconst useMyPosts = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const { id: postSlug } = useParams();\n    // const { postDetails, postsList, categoriesList: postsCategoriesList, selectedCategory, setSelectedCategory, setPostsList } = useContext(PostsContext);\n    const { toast } = useToast()\n    const { logout } = useAuth();\n\n    // const selectedCategory = searchParams.get('category');\n    const [postFormState, postFormDispatcher] = useReducer(postFormReducer, { ...initialState });\n    // const [postFormState, postFormDispatcher] = useReducer(postFormReducer, { ...initialState, postCategory: selectedCategory });\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n    const fetchMyPostsData = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const postsData = await postsService.getAuthPosts(filters);\n            if(postsData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n                setTimeout(() => {\n                    setFetchStatus('none');\n                }, 1000);\n            }\n            return postsData;\n        }catch(error){\n            const { statusCode } = error;\n            if(statusCode === 401){\n                logout()\n            }\n            setFetchStatus('failure');\n            throw error;\n        }\n    }\n\n    const fetchCategoriesData = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const categoriesData = await categoriesService.getPostsCategories();\n            setFetchStatus('success');\n            setTimeout(() => {\n                setFetchStatus('none');\n            }, 1000);\n            return categoriesData;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    };\n\n\n    const createPost = useCallback(async (payload) => {\n        try {\n            const postsResponse = await posts.savePost(payload);\n            // const newPostListForState = [...postsList, postsResponse];\n            // setPostsList(newPostListForState);\n            toast({\n                heading: 'Post created successfully!',\n                description: 'Your post has been successfully published!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message, statusCode } = error;\n            if(statusCode === 401){\n                logout()\n            }\n            toast({\n                heading: 'Oops! There was an error creating your post.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            return false;\n        }\n    }, []);\n\n    const updatePost = useCallback(async (payload, id) => {\n        try {\n            const postsResponse = await posts.updatePost(payload, id);\n            // const newPostListForState = postsList.map(item => {\n            //     if (item.id === id) {\n            //         return { id, ...postsResponse };\n            //     }\n            //     return item;\n            // });\n            // setPostsList(newPostListForState);\n            toast({\n                heading: 'Post updated successfully!',\n                description: 'Your post has been successfully updated!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message } = error;\n            toast({\n                heading: 'Oops! There was an error updating your post.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            return false;\n        }\n    }, []);\n\n    const deletePost = useCallback(async (id) => {\n        try {\n            const postsResponse = await posts.deletePost(id);\n            toast({\n                heading: 'Post deleted successfully!',\n                description: 'Your post has been successfully deleted!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message, statusCode } = error;\n            if(statusCode === 401){\n                logout()\n            }\n            toast({\n                heading: 'Oops! There was an error deleting your post.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            throw error;\n            // return false;\n        }\n    }, []);\n\n    const restorePost = useCallback(async (id) => {\n        try {\n            const postsResponse = await posts.restorePost(id);\n            toast({\n                heading: 'Post restored successfully!',\n                description: 'Your post has been successfully restored!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message } = error;\n            toast({\n                heading: 'Oops! There was an error restoring your post.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            throw error;\n            // return false;\n        }\n    }, []);\n\n\n    const validatePostForm = (postPayload) => {\n        const { postTags, currentVisibilityMode, postCategory, postTitle, markdownContent } = postPayload;\n        if (!postCategory) {\n            return [true, 'Category is missing'];\n        }\n        if (!currentVisibilityMode) {\n            return [true, 'Post Visibility Mode is missing'];\n        }\n        if (!postTitle) {\n            return [true, 'Post Title is missing'];\n        }\n        if (!markdownContent) {\n            return [true, 'Post content is missing'];\n        }\n\n        return [false, ''];\n    }\n\n\n    const savePost = async () => {\n        const [error, message] = validatePostForm(postFormState);\n        if(error){\n            toast({\n                heading: 'Oops! Please verify the changes.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            return;\n        }\n\n        const { postId, postTags, currentVisibilityMode, postCategory, postTitle, markdownContent } = postFormState;\n\n        // validate\n\n        const postPayload = {\n            category: postCategory.id,\n            content: markdownContent,\n            post_title: postTitle,\n            visibility: currentVisibilityMode\n        }\n        return postSlug ? updatePost(postPayload, postId) : createPost(postPayload);\n    }\n\n    const fetchUsersPostItem = async () => {\n        if (!postSlug) {\n            return\n        }\n        \n        const { userName } = getUserDetailsOfCurrentUser();\n        try {\n\n            setFetchStatus('loading');\n            const usersPostData = await postsService.getPostBySlug({ userName, postSlug });\n            const { id: postId, category, content, postTitle, visibility, user } = usersPostData || {};\n            const { categoryId, categoryName, categorySlug } = category || {};\n            const { fullName, avatar } = user || {};\n\n            const payload = { postId, markdownContent: content, postTitle, currentVisibilityMode: visibility, postCategory: { id: categoryId, categoryName, categorySlug, value: categorySlug } };\n\n            postFormDispatcher({ type: POST_ACTIONS.SET_FIELDS, payload });\n\n            setFetchStatus('success');\n        } catch (error) {\n            setFetchStatus('failure');\n        }\n    }\n\n    useEffect(() => {\n\n\n        // fetchUsersPostItem();\n    }, [postSlug])\n\n    return {\n        // postDetails,\n        // selectedCategory,\n        // setSelectedCategory,\n        // posts: postsList,\n        // categories: postsCategoriesList,\n        fetchCategoriesData,\n        fetchMyPostsData,\n        fetchUsersPostItem,\n\n        savePost,\n        deletePost,\n        restorePost,\n        \n        postFormState,\n        postFormDispatcher,\n        fetchStatus\n    };\n}\n\nexport default useMyPosts;","import React, { useEffect, useReducer, useState } from \"react\";\n\nimport MarkdownEditor from \"_modules/markdownEditor/_components/MarkdownEditor\";\nimport BreadCrumbs from \"_components/UI/BreadCrumbs/BreadCrumbs\";\nimport Tags from \"_components/UI/Tags/Tags\";\nimport EditableText from \"_components/UI/EditableText/EditableText\";\nimport PostVisibilitySelector from \"_modules/posts/_components/PostVisibilitySelector\";\n\nimport PostCategory from \"_modules/posts/_components/PostCategory\";\nimport usePostsNavigation from \"_modules/posts/_hooks/usePostsNavigation\";\nimport useMyPosts from \"_modules/posts/_hooks/useMyPosts\";\nimport { POST_ACTIONS } from \"_modules/posts/_constants/postReducerActionTypes\";\nimport { Stencil } from \"_components/Loader\";\nimport usePostsCategories from \"_modules/posts/_hooks/usePostsCategories\";\nimport { Alerts } from \"_components/UI\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport { Link } from \"react-router-dom\";\nimport CLIENT_ROUTES from \"_routes/clientRoutes\";\nimport MyPostsHelp from \"_modules/help/MyPostsHelp\";\n\nconst tagsSuggestions = [\n    { id: 'JavaScript', text: 'JavaScript' },\n    { id: 'React', text: 'React' },\n    { id: 'Node.js', text: 'Node.js' },\n    { id: 'CSS', text: 'CSS' },\n    { id: 'HTML', text: 'HTML' },\n    { id: 'Python', text: 'Python' },\n    { id: 'Java', text: 'Java' },\n    { id: 'C++', text: 'C++' },\n    { id: 'Web Development', text: 'Web Development' },\n    { id: 'Programming', text: 'Programming' },\n    { id: 'Frontend', text: 'Frontend' },\n    { id: 'Backend', text: 'Backend' },\n    { id: 'Machine Learning', text: 'Machine Learning' },\n    { id: 'Artificial Intelligence', text: 'Artificial Intelligence' },\n    { id: 'DevOps', text: 'DevOps' },\n    { id: 'Data Science', text: 'Data Science' },\n    { id: 'Mobile Development', text: 'Mobile Development' },\n    { id: 'UX/UI Design', text: 'UX/UI Design' },\n    { id: 'Testing', text: 'Testing' },\n    { id: 'Software Engineering', text: 'Software Engineering' },\n    { id: 'Git', text: 'Git' },\n    { id: 'Docker', text: 'Docker' },\n    { id: 'GraphQL', text: 'GraphQL' },\n    { id: 'REST API', text: 'REST API' },\n    { id: 'AWS', text: 'AWS' },\n    { id: 'Azure', text: 'Azure' },\n    { id: 'SQL', text: 'SQL' },\n    { id: 'NoSQL', text: 'NoSQL' },\n    { id: 'TypeScript', text: 'TypeScript' },\n    { id: 'Sass', text: 'Sass' },\n    { id: 'PHP', text: 'PHP' },\n    { id: 'Ruby', text: 'Ruby' },\n    { id: 'Elixir', text: 'Elixir' },\n    { id: 'Flutter', text: 'Flutter' },\n    { id: 'Kotlin', text: 'Kotlin' },\n    { id: 'Swift', text: 'Swift' },\n];\n\nconst MyPostForm = () => {\n    const { navigateToList } = usePostsNavigation();\n\n    const { postFormState, fetchUsersPostItem, postFormDispatcher, savePost, fetchStatus } = useMyPosts();\n\n    const { postTags, currentVisibilityMode, postCategory, postTitle, markdownContent } = postFormState;\n    const { categoryName } = postCategory || {};\n\n    const handleCancel = () => {\n        navigateToList();\n    }\n\n    const handleSave = async () => {\n        const postResponse = await savePost();\n        if (postResponse) {\n            setTimeout(() => {\n                navigateToList();\n            }, 1300);\n        }\n    }\n\n    const handleSelectTags = (tagsList) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_TAGS, payload: tagsList });\n    }\n\n    const handleTagCreate = (tag) => {\n        // call create api\n        // save the new one to postTags state\n    }\n\n    const handleVisibilityModeChange = (newMode) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_VISIBILITY, payload: newMode });\n    }\n\n\n    const handleMarkdownChange = (value) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_CONTENT, payload: value });\n    }\n\n    const handlePostTitleChange = (value) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_TITLE, payload: value });\n    }\n\n    const handlePostCategoryChange = (id, option) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_CATEGORY, payload: option });\n    }\n\n\n    useEffect(() => {\n        fetchUsersPostItem();\n    }, [])\n\n    if (fetchStatus === 'loading') {\n        return <div className=\"m-5\">\n            <Stencil />\n            <Stencil />\n            <Stencil />\n            <Stencil />\n            <Stencil />\n        </div>\n    }\n\n    if (fetchStatus === 'failure') {\n        return <div>Failed</div>\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"text-default m-5\">\n\n                <div className=\"flex items-center my-2\">\n                <Typography size='lg' type='h2' className='flex mr-3'>Post page\n                              <MyPostsHelp />\n                            </Typography>\n                    {/* <span onClick={handleCancel} className=\"flex text-sm p-2 bg-default hover-accent hover-text-custom rounded-md cursor-pointer mx-1\">\n                        <span className=\"flex items-center pr-2\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-circle-chevron-left\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"m14 16-4-4 4-4\" /></svg>\n                        </span>\n                        Go Back\n                    </span> */}\n                    <div className=\"flex text-sm p-2 bg-highlight rounded-md cursor-pointer mx-1\">\n                        <PostCategory category={postCategory} onChange={handlePostCategoryChange} />\n                    </div>\n                </div>\n                <div className=\"flex justify-between w-full \">\n                    <div className=\"flex flex-col w-3/4\">\n                        <div>\n                            <BreadCrumbs items={[categoryName || 'Select a category', postTitle]} />\n                        </div>\n                        {/*<div className=\"flex\">\n                            <Tags textBoxFieldProps={{ size: 'sm', placeholder: 'Choose tags (press Enter to add)' }} tags={postTags} onChange={handleSelectTags} onCreate={handleTagCreate} suggestions={tagsSuggestions} />\n                        </div>*/}\n                    </div>\n                    <div className=\"flex flex-col\">\n                        <div className=\"\">\n                            <PostVisibilitySelector onChange={handleVisibilityModeChange} currentMode={currentVisibilityMode} />\n                        </div>\n                        <div onClick={handleSave} className=\"bg-accent border border-accent hover-text-default hover-border-accent hover-transparent text-custom text-sm my-2 p-1 px-2 cursor-pointer rounded-md\">\n                            <span className=\"flex\">\n                                Save\n                                <span className=\"text-xs bg-secondary text-secondary border border-secondary px-1 mx-1 rounded-md\">⌘ + Enter</span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"editing-note py-2 bg-default shadow-xl rounded-lg\">\n                    <EditableText className=\"text-default text-lg mx-2\" text={postTitle} onSave={handlePostTitleChange} />\n                    <div className=\"h-screen-1/2s overflow-scrolls\">\n                        <MarkdownEditor content={markdownContent} onChange={handleMarkdownChange} isPreviewEnabled />\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default MyPostForm;"],"names":["_ref","items","links","itemsLength","length","_jsx","className","children","map","item","index","isLastItem","_jsxs","React","Link","to","concat","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","POST_ACTIONS","SET_FIELDS","SET_TAGS","SET_VISIBILITY","SET_CONTENT","SET_TITLE","SET_CATEGORY","RESET_FORM","VISIBILITY_MODES","private","public","visibilityModes","id","label","modeElement","cx","cy","r","EMPTY_POST_TITLE","initialState","postTags","currentVisibilityMode","postTitle","postCategory","markdownContent","postFormReducer","state","type","payload","useMyPosts","searchParams","setSearchParams","useSearchParams","postSlug","useParams","toast","useToast","logout","useAuth","postFormState","postFormDispatcher","useReducer","fetchStatus","setFetchStatus","useState","createPost","useCallback","async","postsResponse","posts","heading","description","options","position","success","error","message","statusCode","updatePost","deletePost","restorePost","useEffect","fetchCategoriesData","categoriesData","categoriesService","setTimeout","fetchMyPostsData","postsData","postsService","filters","fetchUsersPostItem","userName","getUserDetailsOfCurrentUser","usersPostData","postId","category","content","visibility","user","categoryId","categoryName","categorySlug","fullName","avatar","value","savePost","postPayload","validatePostForm","post_title","MyPostForm","navigateToList","usePostsNavigation","Stencil","Typography","size","MyPostsHelp","PostCategory","onChange","handlePostCategoryChange","option","BreadCrumbs","PostVisibilitySelector","newMode","currentMode","onClick","EditableText","text","onSave","MarkdownEditor","isPreviewEnabled"],"sourceRoot":""}