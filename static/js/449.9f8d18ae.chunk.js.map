{"version":3,"file":"static/js/449.9f8d18ae.chunk.js","mappings":"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","sources":["_modules/posts/_components/CreatePostButton.js","_components/DisplayStates/Empty/EmptyAuthUserPosts.js","_pages/myPosts/list/MyPostList.js"],"sourcesContent":["import React from \"react\";\n\nconst CreatePostButton = ({ onCreate=()=>{} }) => {\n\n    return (\n        <div onClick={onCreate} className=\"bg-accent border border-accent hover-text-default hover-border-accent hover-transparent text-custom text-sm p-1 px-2 cursor-pointer rounded-md\">\n            <span className=\"flex\">\n                Start Writing\n                <span className=\"flex items-center ml-2\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-circle-plus\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"M8 12h8\" /><path d=\"M12 8v8\" /></svg>\n                </span>\n            </span>\n        </div>\n    )\n}\n\nexport default CreatePostButton;","import React from \"react\";\n\nimport Typography from \"_components/Misc/Typography/Typography\";\n\nconst EmptyAuthUserPosts = (props) => {\n    const { children } = props;;\n\n    return (\n        <div className='flex flex-col w-full items-center my-12'>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-folder-open\"><path d=\"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2\" /></svg>\n            <div className=\"flex flex-col items-center my-4 text-center\">\n                <Typography size='lg' type='h2'>Hmm...</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Nothing Here... Yet.</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Everyone starts somewhere. You should post something !!</Typography>\n            </div>\n            <div className=\"flex flex-col items-center my-4 text-center\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default EmptyAuthUserPosts;","import React, { useEffect, useState } from 'react'\n\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport PostListItem from '_modules/posts/_components/list/PostListItem';\nimport PostVisibilitySelector from '_modules/posts/_components/PostVisibilitySelector';\nimport { VISIBILITY_MODES } from '_modules/posts/_constants/posts';\nimport CreatePostButton from '_modules/posts/_components/CreatePostButton';\nimport PostCategory from '_modules/posts/_components/PostCategory';\nimport usePostsNavigation from '_modules/posts/_hooks/usePostsNavigation';\nimport useMyPosts from '_modules/posts/_hooks/useMyPosts';\nimport useShowMorePagination from '_components/Pagination/_hooks/useShowMorePagination';\nimport ShowMorePaginationWrapper from '_components/Pagination/ShowMorePaginationWrapper';\nimport { stringifyJSON } from '_utils/json';\nimport PostFilters from '_modules/posts/_components/PostFilters';\nimport EmptyAuthUserPosts from '_components/DisplayStates/Empty/EmptyAuthUserPosts';\nimport { Link } from 'react-router-dom';\nimport CLIENT_ROUTES from '_routes/clientRoutes';\nimport { Alerts } from '_components/UI';\nimport MyPostsHelp from '_modules/help/MyPostsHelp';\n\nconst pageSize = 30;\n\nconst MyPostList = (props) => {\n    const { navigateToCreate, navigateToEdit } = usePostsNavigation();\n\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n    const { fetchStatus, fetchMyPostsData } = useMyPosts();\n\n    const [filters, setFilters] = useState({ visibility: 'public' });\n    const [data, setData] = useState([]);\n\n    const { hasFollowButton = true, onEdit } = props;\n    const [currentVisibilityMode, setCurrentVisibilityMode] = useState(VISIBILITY_MODES.public)\n\n\n    const handleFiltersChange = async (newFilters) => {\n        const postFilters = { ...filters, ...newFilters };\n        setFilters(postFilters);\n        setData([]);\n        resetPagination();\n        const postsFilter = { page: 1, limit: pageSize, ...postFilters };\n        try {\n            const posts = await fetchMyPostsData(postsFilter);\n            checkIfAllDataFetched(posts);\n            setData(posts);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    const fetchMyPosts = async () => {\n        const postsFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n\n        try {\n            const posts = await fetchMyPostsData(postsFilter);\n            setData((previousPosts) => [...previousPosts, ...posts]);\n            incrementPagination();\n            checkIfAllDataFetched(posts);\n            return posts;\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n\n    useEffect(() => {\n        fetchMyPosts();\n    }, [])\n\n\n    const handleCreate = () => {\n        navigateToCreate();\n    }\n\n\n    const handleVisibilityModeChange = (newMode) => {\n        setCurrentVisibilityMode(newMode);\n        handleFiltersChange({ visibility: newMode });\n    }\n    const handlePostCategoryChange = (id, option, categoryValue) => {\n        handleFiltersChange({ category: categoryValue });\n    }\n\n\n    return (\n        <React.Fragment>\n            <div className=\"text-default m-5\">\n\n                <div className=\"flex\">\n                    <div className='flex justify-between w-full'>\n                        <div className=\"flex flex-col mx-2 my-2\">\n                        <Typography size='lg' type='h2' className='flex'>Your Posts\n                              <MyPostsHelp />\n                            </Typography>\n                            <Typography variant='secondary' size='sm' textVariant='default'>\n                                List of all the posts published by you\n                            </Typography>\n                        </div>\n                        <div className=\"flex flex-col my-2\">\n                            <CreatePostButton onCreate={handleCreate} />\n                        </div>\n                    </div>\n                </div>\n\n                <div className='flex'>\n                    <div className='flex justify-between w-full'>\n                        <div className='flex my-2'>\n\n                            <PostFilters onChange={handleFiltersChange} />\n                            <div className='content-center'>\n                                <PostCategory onChange={handlePostCategoryChange} hasAddOption={false} />\n                            </div>\n                        </div>\n\n\n                        <div className='m-2'>\n                            <div className='content-center mx-2'>\n                                <PostVisibilitySelector onChange={handleVisibilityModeChange} currentMode={currentVisibilityMode} />\n                            </div>\n                        </div>\n                    </div>\n\n\n\n                </div>\n\n                <ShowMorePaginationWrapper key={`posts_${stringifyJSON(filters)}`} initialFetchStatus={fetchStatus} isEmpty={fetchStatus === 'empty'} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchMyPosts}>\n\n                    {(fetchStatus !== 'empty') ? (\n                        <div className='flex content-start w-full'>\n                            <React.Fragment>\n                                {data.map(postItem => <PostListItem key={postItem.id} postItem={postItem} onEdit={navigateToEdit} hasFollowButton={hasFollowButton} />)}\n                            </React.Fragment>\n                        </div>\n                    ) : (\n                        <EmptyAuthUserPosts>\n                            <CreatePostButton onCreate={handleCreate} />\n                        </EmptyAuthUserPosts>\n                    )}\n\n                </ShowMorePaginationWrapper>\n            </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default MyPostList;"],"names":["_ref","onCreate","_jsx","onClick","className","children","_jsxs","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","d","props","class","Typography","size","type","variant","textVariant","navigateToCreate","navigateToEdit","usePostsNavigation","currentPage","isAllDataFetched","incrementPagination","checkIfAllDataFetched","resetPagination","useShowMorePagination","pageSize","fetchStatus","fetchMyPostsData","useMyPosts","filters","setFilters","useState","visibility","data","setData","hasFollowButton","onEdit","currentVisibilityMode","setCurrentVisibilityMode","VISIBILITY_MODES","public","handleFiltersChange","async","postFilters","newFilters","postsFilter","page","limit","posts","err","console","log","fetchMyPosts","previousPosts","useEffect","handleCreate","React","MyPostsHelp","CreatePostButton","PostFilters","onChange","PostCategory","handlePostCategoryChange","id","option","categoryValue","category","hasAddOption","PostVisibilitySelector","newMode","currentMode","ShowMorePaginationWrapper","initialFetchStatus","isEmpty","fetchDataMethod","map","postItem","PostListItem","EmptyAuthUserPosts","concat","stringifyJSON"],"sourceRoot":""}