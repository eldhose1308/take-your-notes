{"version":3,"file":"static/js/141.14df4d5d.chunk.js","mappings":"gSAmBA,MA8FA,EA7FgCA,KAC5B,MAAM,YAAEC,EAAaC,oBAAqBC,IAA4BC,EAAAA,EAAAA,MAChE,YAAEC,EAAW,iBAAEC,EAAgB,oBAAEC,EAAmB,sBAAEC,EAAqB,gBAAEC,IAAoBC,EAAAA,EAAAA,GAAsB,CAAEC,SAHlH,MAKNC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,CAAEF,QAAS,aAC3CG,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,KAU3B,SAAEG,KARyBC,EAAAA,EAAAA,GAAuB,CACpDjB,cACAkB,SAASC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,IACjBC,OAAOF,EAAAA,EAAAA,KAACG,EAAAA,EAAwB,IAChCC,cAAcJ,EAAAA,EAAAA,KAACK,EAAAA,EAA8B,IAC7CC,SAASN,EAAAA,EAAAA,KAACO,EAAAA,EAAyB,CAACC,eAAgBb,OAGnCc,EAAAA,EAAAA,OACfC,IAA6C,cAApBlB,EAAQA,UAA4BK,IAA6B,iBAAhBhB,EAE1E8B,EAAsBC,UACxB,MAAMC,EAAc,IAAKrB,KAAYsB,GACrCrB,EAAWoB,GACXjB,EAAQ,IACRP,IACA,MAAM0B,EAAc,CAAEC,KAAM,EAAGC,MAxBtB,MAwB0CJ,GACnD,IAEI,MAAMK,QAAcnC,EAAwBgC,GAC5C3B,EAAsB8B,GACtBtB,EAAQsB,EACZ,CAAC,MAAMC,GACHC,QAAQC,MAAMF,EAClB,GAIEG,EAAaV,UACf,MAAMG,EAAc,CAAEC,KAAM/B,EAAc,EAAGgC,MArCpC,MAqCwDzB,GACjE,IAEI,MAAM0B,QAAcnC,EAAwBgC,IAAgB,GAK5D,OAJAnB,GAAS2B,GAAkB,IAAIA,KAAkBL,KAEjD/B,IACAC,EAAsB8B,GACfA,CACX,CAAC,MAAMC,GAEH,MADAC,QAAQC,MAAMF,GACRA,CACV,GAQJ,OAJAK,EAAAA,EAAAA,YAAU,KACNF,GAAY,GACb,KAGCG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EAEtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAC7C3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CAACC,KAAK,KAAKC,KAAK,KAAIH,SAAC,gBAChC3B,EAAAA,EAAAA,KAAA,OAAK0B,UAAU,OAAMC,UACjB3B,EAAAA,EAAAA,KAAA,OAAK0B,UAAU,sBAAqBC,UAChC3B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAqB,CAACC,SAAUrB,EAAqBsB,YAAY,YAAYC,aAAW,YAKrGlC,EAAAA,EAAAA,KAAA,OAAK0B,UAAU,mCAAkCC,SAC5CjB,IACGV,EAAAA,EAAAA,KAACmC,EAAAA,SAAc,CAAAR,UACX3B,EAAAA,EAAAA,KAACoC,EAAAA,EAAmB,CAACJ,SAAUrB,YAM/CX,EAAAA,EAAAA,KAAA,OAAK0B,UAAU,YAAWC,UAElB3B,EAAAA,EAAAA,KAACqC,EAAAA,EAAyB,CAACC,QAAyB,YAAhBzD,EAA2B0D,mBAAoB1D,EAAaI,YAAaA,EAAaC,iBAAkBA,EAAkBsD,gBAAiBlB,EAAWK,UAGtL3B,EAAAA,EAAAA,KAACO,EAAAA,EAAyB,CAACC,eAAgBb,UAMrD,C","sources":["_pages/postsCategories/PostsCategoriesListPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport ShowMorePaginationWrapper from \"_components/Pagination/ShowMorePaginationWrapper\";\n\nimport CategoryFollowingsUnAuthorised from \"_components/DisplayStates/Error/CategoryFollowingsUnAuthorised\";\nimport useShowMorePagination from \"_components/Pagination/_hooks/useShowMorePagination\";\n\nimport { stringifyJSON } from \"_utils/json\";\nimport PostCategoryFilters from \"_modules/posts/_components/PostCategoryFilters\";\nimport usePostsCategories from \"_modules/posts/_hooks/usePostsCategories\";\nimport PostCategoriesListSuccess from \"./states/PostCategoriesListSuccess\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport FollowUnfollowToggler from \"_modules/togglers/FollowUnfollowToggler\";\n\nimport { getUserDetailsOfCurrentUser } from \"_utils/userAuth\";\nimport { Stencil } from \"_components/Loader\";\nimport EmptyFollowingCategories from \"_components/DisplayStates/Empty/EmptyFollowingCategories\";\nimport useComponentFetchState from \"_hooks/useComponentFetchState\";\n\nconst pageSize = 30;\nconst PostsCategoriesListPage = () => {\n    const { fetchStatus, fetchPostCategories: fetchPostCategoriesData } = usePostsCategories();\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n\n    const [filters, setFilters] = useState({ filters: 'explore' });\n    const [data, setData] = useState([]);\n\n    const CategoriesComponentState = useComponentFetchState({\n        fetchStatus,\n        loading: <Stencil />,\n        empty: <EmptyFollowingCategories />,\n        unauthorised: <CategoryFollowingsUnAuthorised />,\n        success: <PostCategoriesListSuccess categoriesList={data} />\n    });\n\n    const { userName } = getUserDetailsOfCurrentUser();\n    const authorisedForListing = !(filters.filters === 'following' && !userName) && fetchStatus !== 'unauthorised';\n\n    const handleFiltersChange = async (newFilters) => {\n        const userFilters = { ...filters, ...newFilters };\n        setFilters(userFilters);\n        setData([]);\n        resetPagination();\n        const usersFilter = { page: 1, limit: pageSize, ...userFilters };\n        try{\n\n            const users = await fetchPostCategoriesData(usersFilter);\n            checkIfAllDataFetched(users);\n            setData(users);\n        }catch(err){        \n            console.error(err);\n        }\n    }\n\n\n    const fetchUsers = async () => {\n        const usersFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n        try{\n\n            const users = await fetchPostCategoriesData(usersFilter) || [];\n            setData((previousUsers) => [...previousUsers, ...users]);\n            \n            incrementPagination();\n            checkIfAllDataFetched(users);\n            return users;\n        }catch(err){\n            console.error(err);\n            throw err;\n        }\n    }\n\n   \n    useEffect(() => {\n        fetchUsers();\n    }, [])\n\n    return (\n        <div className=\"text-default m-5\">\n            <div className=\"flex mx-8\">\n\n                <div className=\"flex justify-between w-full mx-4\">\n                    <Typography size='lg' type='h2'>Categories</Typography>\n                    <div className=\"flex\">\n                        <div className=\"content-center mx-2\">\n                            <FollowUnfollowToggler onChange={handleFiltersChange} currentMode='following' renderLabel />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-between w-full my-2\">\n                    {authorisedForListing && (\n                        <React.Fragment>\n                            <PostCategoryFilters onChange={handleFiltersChange} />\n                        </React.Fragment>\n                    )}\n                </div>\n\n            </div>\n            <div className=\"flex my-2\">\n                {/* {authorisedForListing ? ( */}\n                    <ShowMorePaginationWrapper isEmpty={fetchStatus !== 'success'} initialFetchStatus={fetchStatus} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchUsers}>\n                        {/* <PostCategoriesListSuccess categoriesList={data} /> */}\n                        {/* {CategoriesComponentState} */}\n                        <PostCategoriesListSuccess categoriesList={data} />\n                    </ShowMorePaginationWrapper>\n                {/* ) : (\n                    <CategoryFollowingsUnAuthorised />\n                )} */}\n            </div>\n        </div>\n    )\n}\n\nexport default PostsCategoriesListPage;"],"names":["PostsCategoriesListPage","fetchStatus","fetchPostCategories","fetchPostCategoriesData","usePostsCategories","currentPage","isAllDataFetched","incrementPagination","checkIfAllDataFetched","resetPagination","useShowMorePagination","pageSize","filters","setFilters","useState","data","setData","userName","useComponentFetchState","loading","_jsx","Stencil","empty","EmptyFollowingCategories","unauthorised","CategoryFollowingsUnAuthorised","success","PostCategoriesListSuccess","categoriesList","getUserDetailsOfCurrentUser","authorisedForListing","handleFiltersChange","async","userFilters","newFilters","usersFilter","page","limit","users","err","console","error","fetchUsers","previousUsers","useEffect","_jsxs","className","children","Typography","size","type","FollowUnfollowToggler","onChange","currentMode","renderLabel","React","PostCategoryFilters","ShowMorePaginationWrapper","isEmpty","initialFetchStatus","fetchDataMethod"],"sourceRoot":""}