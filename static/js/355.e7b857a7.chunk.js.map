{"version":3,"file":"static/js/355.e7b857a7.chunk.js","mappings":"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","sources":["_components/UI/Alerts/Alerts.js","_modules/postCategories/_components/MainCategorySelector.js","_pages/myCategories/form/MyCategoriesForm.js"],"sourcesContent":["import React from \"react\";\nimport './Alerts.css';\n\nconst alertColors = {\n    info: {\n        border: 'border-info',\n        text: 'text-info',\n    },\n    error: {\n        border: 'border-destructive',\n        text: 'text-destructive',\n    },\n}\n\nconst alertIcon = {\n    info: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-info\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"M12 16v-4\" /><path d=\"M12 8h.01\" /></svg>,\n    error: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-triangle-alert\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\" /><path d=\"M12 9v4\" /><path d=\"M12 17h.01\" /></svg>\n}\n\nconst Alerts = (props) => {\n    const { type = 'error', children } = props;\n\n    return (\n        <div className={`flex text-sm my-2 px-4 py-2 bg-default border-l ${alertColors[type].border} rounded-md`}>\n            <div className={`flex ${alertColors[type].text} items-center mr-2`}>\n                {alertIcon[type]}\n            </div>\n\n            <div className='flex flex-col'>\n                {children}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Alerts;","import React, { useState } from \"react\"\n\nimport TextBoxWithSuggestions from \"_components/UI/TextBoxWithSuggestions/TextBoxWithSuggestions\";\n\nconst MainCategorySelector = (props) => {\n    const { mainCategories = [], suggestions=[], onChange = () => { }, onCreate = () => { }, className, ...textBoxProps } = props;\n    const extraProps = {\n        placeholder: 'Type and press Enter to select',\n        labelName: 'Related Tags',\n    }\n\n    const [value, setValue] = useState('')\n\n    const removeItem = (index) => {\n        const newTags = mainCategories.slice(0, index).concat(mainCategories.slice(index + 1))\n        return newTags\n    }\n\n\n    const handleRemoveTag = (index) => {\n        const newTags = removeItem(index)\n        onChange(newTags)\n    }\n\n    const handleRemoveAll = () => {\n        onChange([])\n        // focus to textbox\n    }\n\n    const handleKeyDown = (value, e) => {\n        if (e.key === 'Enter') {\n            if (!value) { return }\n            setValue('')\n            onCreate(value)\n        }\n\n        if (e.key === 'Backspace' && value.length === 0) {\n            const tagsSize = mainCategories.length\n            const tagsWithoutLastOne = removeItem(tagsSize - 1)\n            onChange(tagsWithoutLastOne)\n        }\n    }\n\n    const handleChange = (value, e) => {\n        setValue(value)\n    }\n\n    const handleSuggestionClick = (id, selectedValues) => {\n        onChange(selectedValues)\n        // setValue('')\n    }\n\n    const handleCreate = (value, selectedValues) => {\n        // alert('Create')\n        onCreate(value)\n        setValue('')\n    }\n\n    return (\n        <React.Fragment>\n            <div>\n            <div className={`flex max-w-mds justify-ends text-default  ${className}`}>\n                {mainCategories.map((tag, index) => {\n                    const { mainCategoryName: tagItem } = tag;\n                    return (\n                    <div key={index} className=\"flex bg-custom mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"mx-1 px-2 py-1\">#{tagItem}</span>\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={() => handleRemoveTag(index)}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-x\"><path d=\"M18 6 6 18\" /><path d=\"m6 6 12 12\" /></svg>\n                        </span>\n                    </div>\n                )})}\n                {mainCategories.length > 2 && (\n                    <div className=\"flex mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={handleRemoveAll}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-delete\"><path d=\"M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\" /><line x1=\"18\" x2=\"12\" y1=\"9\" y2=\"15\" /><line x1=\"12\" x2=\"18\" y1=\"9\" y2=\"15\" /></svg>\n                        </span>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex justify-ends\">\n                <div className=\"min-w-md\">\n                    <TextBoxWithSuggestions {...extraProps} {...textBoxProps} onKeyDown={handleKeyDown} onChange={handleChange} onSuggestionClick={handleSuggestionClick} onCreate={handleCreate} value={value} selectedOptions={mainCategories} suggestions={suggestions} labelKey=\"mainCategoryName\" idKey=\"id\" hasCreateNew={false} />\n                </div>\n            </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default MainCategorySelector","import React, { useEffect, useReducer, useState } from \"react\";\n\nimport { Card, CardHeader, CardContent, CardFooter } from \"_components/Misc/Card/Card\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport { Button, TextBox } from \"_components/Form\";\nimport MainCategorySelector from \"_modules/postCategories/_components/MainCategorySelector\";\nimport { Alerts } from \"_components/UI\";\n\nimport * as postsCategoriesService from \"_services/postsCategories.service\";\nimport { useParams } from \"react-router-dom\";\n\n\nconst buttonCreateStateValues = {\n    none: 'Create',\n    loading: 'Creating',\n    failure: 'Failed',\n    completed: 'Created',\n}\n\nconst buttonUpdateStateValues = {\n    none: 'Update',\n    loading: 'Updating',\n    failure: 'Failed',\n    completed: 'Updated',\n}\n\nconst MyCategoriesForm = (props) => {\n    const { id: categorySlug } = useParams();\n\n    const { categoryModalData, onClose = () => { } } = props;\n    const { data = {}, onClick } = categoryModalData || {};\n    const { categoryName = '' } = data;\n\n    const buttonStateValues = categorySlug ? buttonUpdateStateValues : buttonCreateStateValues;\n    const heading = `${categorySlug ? 'Update Category' : 'Create Category'}`;\n    const subHeading = `Are you sure you want to ${categorySlug ? `update the category` : 'create a new category'}?`;\n\n    const [selectedMainCategories, setSelectedMainCategories] = useState([]);\n    const [mainCategories, setMainCategories] = useState([]);\n\n    const [categoryId, setCategoryId] = useState();\n    const [newFolderName, setNewFolderName] = useState(categoryName);\n    const [buttonStatus, setButtonStatus] = useState('none');\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n   \n    const validatePostCategory = (categoryName) => {\n        if (!categoryName) {\n            setErrorMessage('Please enter a category name');\n            return false;\n        }\n        setErrorMessage('');\n        return true;\n    }\n\n    const handleMainCategorySelect = (selectedMainCategory) => {\n        setSelectedMainCategories(selectedMainCategory);\n    }\n\n    const handleSubmitClick = async () => {\n        const selectedMainCategoriesIds = selectedMainCategories.map((category) => category.id);\n        const isValid = validatePostCategory(newFolderName);\n        const newCategoryPayload = {\n            category_name: newFolderName,\n            main_category_ids: selectedMainCategoriesIds\n        };\n        if (!isValid) {\n            return\n        }\n\n        if (categorySlug) {\n            setButtonStatus('loading');\n            try {\n                const postsResponse = await postsCategoriesService.updatePostCategory(newCategoryPayload, categoryId);\n                // await onClick(newCategoryPayload, categorySlug);\n                setButtonStatus('completed');               \n            } catch (err) {\n                setButtonStatus('failure');\n                setErrorMessage(err);\n            } finally {\n                setTimeout(() => {\n                    setButtonStatus('none');\n                }, 1000)\n            }\n            return;\n        }\n    }\n\n    useEffect(() => {\n        setNewFolderName(categoryName)\n    }, [categoryName])\n\n\n    useEffect(() => {\n        const fetchMainCategories = async () => {\n            try {\n                const mainCategoriesData = await postsCategoriesService.getMainPostsCategories();\n                setMainCategories(mainCategoriesData);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        fetchMainCategories();\n    }, [])\n\n\n    useEffect(() => {\n        if (!categorySlug) {\n            return\n        }\n\n        const fetchUsersPostItem = async () => {\n            try {\n                setFetchStatus('loading');\n                const postCategoryData = await postsCategoriesService.getAuthPostsCategoriesBySlug(categorySlug);\n                const { id: categoryId, mainCategories, categoryName } = postCategoryData || {};\n               \n                setCategoryId(categoryId);\n                setNewFolderName(categoryName);\n                setSelectedMainCategories(mainCategories);\n\n                setFetchStatus('success');\n            } catch (error) {\n                setFetchStatus('failure');\n            }\n        }\n\n        fetchUsersPostItem();\n    }, [categorySlug])\n\n\n    return (\n        <React.Fragment>\n            <div className=\"flex flex-col\">\n\n            {/* <Card variant='ghost' rounded='lg'>\n                <CardHeader> */}\n                <div className=\"flex flex-col px-3 py-2\">\n\n                    <Typography size='lg'>{heading}</Typography>\n                    <Typography size='xs' textVariant='default'>{subHeading}</Typography>\n                    {categorySlug ? <Typography size='xs' textVariant='bold'>{categoryName}</Typography> : null}\n                </div>\n                {/* </CardHeader>\n\n                <CardContent> */}\n                <div className=\"flex flex-col mx-3 px-3 py-2 bg-default\">\n                <div className=\"my-3\">\n                    <TextBox\n                        type='text'\n                        labelName='New category name'\n                        placeholder=\"Enter category name\"\n                        value={newFolderName}\n                        onChange={setNewFolderName}\n                        size='sm'\n                        isFocused\n                        validationMsg={{\n                            type: 'error',\n                            messages: [errorMessage]\n                        }}\n                    />\n                    </div>\n\n                    <div className=\"my-3\">\n                        <MainCategorySelector mainCategories={selectedMainCategories} onChange={handleMainCategorySelect} suggestions={mainCategories} />\n                        {/* <Tags textBoxFieldProps={{ size: 'sm', placeholder: 'Choose tags (press Enter to add)' }} tags={[]} onChange={()=>{}} suggestions={mainCategories} /> */}\n                    </div>\n\n\n                    <Alerts type='info'>\n                    <Typography textVariant='light' size='xs'>- While creating a new category, please verify the main categories/tags below.</Typography>\n                    <Typography textVariant='light' size='xs'>- This ensures your category and posts can be easily found in user suggestions and properly grouped for processing.</Typography>\n                    \n                        </Alerts>\n                   \n</div>\n\n                {/* </CardContent>\n\n                <CardFooter className='p-0 flex justify-between'> */}\n                <div className=\"items-center px-2 py-4 flex justify-between\">\n\n                    <Button size='xs' width='none' variant='custom' onClick={()=>{}}>Cancel</Button>\n                    <Button size='xs' width='none' variant='accent' onClick={handleSubmitClick} buttonStatus={buttonStatus}>\n                        {buttonStateValues[buttonStatus]}\n                    </Button>\n                </div>\n                {/* </CardFooter>\n            </Card> */}\n            </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default MyCategoriesForm;"],"names":["alertColors","info","border","text","error","alertIcon","_jsxs","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","children","_jsx","cx","cy","r","d","props","type","concat","mainCategories","suggestions","onChange","onCreate","textBoxProps","value","setValue","useState","removeItem","index","slice","React","map","tag","mainCategoryName","tagItem","onClick","newTags","handleRemoveTag","length","handleRemoveAll","x1","x2","y1","y2","TextBoxWithSuggestions","placeholder","labelName","onKeyDown","handleKeyDown","e","key","tagsSize","tagsWithoutLastOne","handleChange","onSuggestionClick","handleSuggestionClick","id","selectedValues","handleCreate","selectedOptions","labelKey","idKey","hasCreateNew","buttonCreateStateValues","none","loading","failure","completed","buttonUpdateStateValues","categorySlug","useParams","categoryModalData","onClose","data","categoryName","buttonStateValues","heading","subHeading","selectedMainCategories","setSelectedMainCategories","setMainCategories","categoryId","setCategoryId","newFolderName","setNewFolderName","buttonStatus","setButtonStatus","fetchStatus","setFetchStatus","errorMessage","setErrorMessage","useEffect","async","mainCategoriesData","postsCategoriesService","err","console","log","fetchMainCategories","postCategoryData","fetchUsersPostItem","Typography","size","textVariant","TextBox","isFocused","validationMsg","messages","MainCategorySelector","selectedMainCategory","Alerts","Button","variant","selectedMainCategoriesIds","category","isValid","validatePostCategory","newCategoryPayload","category_name","main_category_ids","setTimeout"],"sourceRoot":""}