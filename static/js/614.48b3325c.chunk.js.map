{"version":3,"file":"static/js/614.48b3325c.chunk.js","mappings":"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","sources":["_components/DisplayStates/Empty/EmptyUserPosts.js","_modules/posts/_hooks/usePosts.js","_modules/users/_hooks/useUserPosts.js","_modules/posts/_components/list/PostList.js","_pages/posts/states/PostsSuccess.js","_pages/users/UsersPostList.js"],"sourcesContent":["import React from \"react\";\n\nimport Typography from \"_components/Misc/Typography/Typography\";\n\nconst EmptyUserPosts = () => {\n\n    return (\n        <div className='flex flex-col w-full items-center my-12'>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-folder-open\"><path d=\"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2\" /></svg>\n            <div className=\"flex flex-col items-center my-4 text-center\">\n                <Typography size='lg' type='h2'>Hmm...</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Nothing Here... Yet.</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Everyone starts somewhere. This user might post something soon!!</Typography>\n            </div>\n        </div>\n    )\n}\n\nexport default EmptyUserPosts;","import { useState, useEffect } from \"react\";\n\nimport * as postsService from \"_services/posts.service\";\n\nconst usePosts = () => {\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n    const fetchPostsData = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const postsData = await postsService.getPosts(filters);\n            // setFetchStatus('success');\n            if(postsData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n                // setTimeout(() => {\n                //     setFetchStatus('none');\n                // }, 1000);\n            }\n            \n            return postsData;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    }\n\n    // useEffect(() => {\n    //     fetchPostsData();\n    // }, [])\n\n    return {\n        fetchStatus,\n        fetchPostsData,\n    }\n}\n\nexport default usePosts;","import { useState, useEffect } from \"react\";\n\nimport * as usersService from '_services/users.service';\n\nconst useUserPosts = ({ userName }) => {\n    const [usersPostList, setUsersPostList] = useState([]);\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n\n    const fetchUsersPost = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const usersPostData = await usersService.getUsersPost(userName, filters);\n            setUsersPostList(usersPostData);\n            if(usersPostData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n            }\n            return usersPostData;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    }\n\n    useEffect(() => {\n        if (!userName) {\n            return;\n        }\n\n        // fetchUsersPost();\n    }, [userName]);\n\n    return {\n        fetchStatus,\n        usersPostList,\n\n        fetchUsersPost\n    }\n}\n\nexport default useUserPosts","import React from \"react\";\nimport PostListItem from \"./PostListItem\";\n\n\nconst PostList = (props) => {\n    const { posts = [] } = props;\n\n    return (\n        <React.Fragment>\n            <div className=\"flex w-full\">\n                {posts.map(postItem => <PostListItem key={postItem.id} postItem={postItem} />)}\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default PostList;","import PostList from \"_modules/posts/_components/list/PostList\";\nimport PostListItem from \"_modules/posts/_components/list/PostListItem\";\nimport React, { useEffect } from \"react\";\n\n\nconst PostsSuccess = (props) => {\n    const { usersPostList = [] } = props;\n\n    return (\n        <div className='flex content-start w-full'>\n\n            <React.Fragment>\n                <PostList posts={usersPostList} />\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default PostsSuccess;","import React, { useEffect, useState } from \"react\";\n\nimport PostsSuccess from \"_pages/posts/states/PostsSuccess\";\nimport ShowMorePaginationWrapper from \"_components/Pagination/ShowMorePaginationWrapper\";\nimport PostFilters from \"_modules/posts/_components/PostFilters\";\nimport usePosts from \"_modules/posts/_hooks/usePosts\";\nimport useShowMorePagination from \"_components/Pagination/_hooks/useShowMorePagination\";\nimport useUserPosts from \"_modules/users/_hooks/useUserPosts\";\nimport { stringifyJSON } from \"_utils/json\";\nimport EmptyUserPosts from \"_components/DisplayStates/Empty/EmptyUserPosts\";\n\n\nconst UsersPostList = (props) => {\n    const { pageSize = 30, initialPage = 0, initialData = [], userName } = props;\n\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n    const { fetchUsersPost, fetchStatus } = useUserPosts({ userName });\n\n    const [filters, setFilters] = useState();\n    const [data, setData] = useState(initialData || []);\n\n    const handleFiltersChange = async (filters) => {\n        setFilters(filters);\n        setData([]);\n        resetPagination();\n        const postsFilter = { page: 1, limit: pageSize, ...filters };\n        const posts = await fetchUsersPost(postsFilter);\n        checkIfAllDataFetched(posts);\n        setData(posts);\n    }\n\n    const fetchPosts = async () => {\n        const postsFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n        const posts = await fetchUsersPost(postsFilter);\n        setData((previousPosts) => [...previousPosts, ...posts]);\n\n        incrementPagination();\n        checkIfAllDataFetched(posts);\n        return posts;\n    }\n\n\n    useEffect(() => {\n        fetchPosts();\n    }, [])\n\n    return (\n        <React.Fragment>\n            {fetchStatus !== 'empty' ? (\n                <React.Fragment>\n                    <PostFilters onChange={handleFiltersChange} />\n                    <ShowMorePaginationWrapper key={`posts_${stringifyJSON(filters)}`} isEmpty={fetchStatus === 'empty'} initialFetchStatus={fetchStatus} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchPosts}>\n                    <React.Fragment>\n                        {fetchStatus !== 'empty' ? (\n                            <PostsSuccess usersPostList={data} />\n                        ) : (\n                            <EmptyUserPosts />\n                        )}\n                    </React.Fragment>\n                    </ShowMorePaginationWrapper>\n                </React.Fragment>\n            ) : (\n                <EmptyUserPosts />\n            )}\n        </React.Fragment>\n    )\n}\n\nexport default UsersPostList;"],"names":["EmptyUserPosts","_jsxs","className","children","_jsx","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","class","d","Typography","size","type","variant","textVariant","usePosts","fetchStatus","setFetchStatus","useState","fetchPostsData","async","postsData","postsService","filters","length","error","_ref","userName","usersPostList","setUsersPostList","useEffect","fetchUsersPost","usersPostData","usersService","props","posts","React","map","postItem","PostListItem","id","PostList","pageSize","initialPage","initialData","currentPage","isAllDataFetched","incrementPagination","checkIfAllDataFetched","resetPagination","useShowMorePagination","useUserPosts","setFilters","data","setData","fetchPosts","postsFilter","page","limit","previousPosts","PostFilters","onChange","ShowMorePaginationWrapper","isEmpty","initialFetchStatus","fetchDataMethod","PostsSuccess","concat","stringifyJSON"],"sourceRoot":""}