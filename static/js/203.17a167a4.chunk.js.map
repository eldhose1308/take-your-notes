{"version":3,"file":"static/js/203.17a167a4.chunk.js","mappings":"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","sources":["_components/UI/BreadCrumbs/BreadCrumbs.js","_pages/myPosts/form/MyPostForm.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst BreadCrumbs = ({ items = [], links = [] }) => {\n    const itemsLength = items.length - 1;\n\n    return (\n        <div className=\"flex rounded-lg px-2 my-2 text-xs bg-default text-secondary\">\n            {items.map((item, index) => {\n                const isLastItem = index === itemsLength;\n                return (\n                    <React.Fragment>\n                        {links[index] ? <Link to={links[index]}>\n                            <span className={`${!isLastItem ? '' : 'text-default'}`}>{item}</span>\n                        </Link> : <span className={`${!isLastItem ? '' : 'text-default'}`}>{item}</span>}\n                        {!isLastItem && (<span className=\"flex items-center text-default mx-1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-chevron-right\"><path d=\"m9 18 6-6-6-6\" /></svg>\n                        </span>\n                        )}\n                    </React.Fragment>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default BreadCrumbs;","import React, { useEffect, useReducer, useState } from \"react\";\n\nimport MarkdownEditor from \"_modules/markdownEditor/_components/MarkdownEditor\";\nimport BreadCrumbs from \"_components/UI/BreadCrumbs/BreadCrumbs\";\nimport Tags from \"_components/UI/Tags/Tags\";\nimport EditableText from \"_components/UI/EditableText/EditableText\";\nimport PostVisibilitySelector from \"_modules/posts/_components/PostVisibilitySelector\";\n\nimport PostCategory from \"_modules/posts/_components/PostCategory\";\nimport usePostsNavigation from \"_modules/posts/_hooks/usePostsNavigation\";\nimport useMyPosts from \"_modules/posts/_hooks/useMyPosts\";\nimport { POST_ACTIONS } from \"_modules/posts/_constants/postReducerActionTypes\";\nimport { Stencil } from \"_components/Loader\";\nimport usePostsCategories from \"_modules/posts/_hooks/usePostsCategories\";\n\nconst tagsSuggestions = [\n    { id: 'JavaScript', text: 'JavaScript' },\n    { id: 'React', text: 'React' },\n    { id: 'Node.js', text: 'Node.js' },\n    { id: 'CSS', text: 'CSS' },\n    { id: 'HTML', text: 'HTML' },\n    { id: 'Python', text: 'Python' },\n    { id: 'Java', text: 'Java' },\n    { id: 'C++', text: 'C++' },\n    { id: 'Web Development', text: 'Web Development' },\n    { id: 'Programming', text: 'Programming' },\n    { id: 'Frontend', text: 'Frontend' },\n    { id: 'Backend', text: 'Backend' },\n    { id: 'Machine Learning', text: 'Machine Learning' },\n    { id: 'Artificial Intelligence', text: 'Artificial Intelligence' },\n    { id: 'DevOps', text: 'DevOps' },\n    { id: 'Data Science', text: 'Data Science' },\n    { id: 'Mobile Development', text: 'Mobile Development' },\n    { id: 'UX/UI Design', text: 'UX/UI Design' },\n    { id: 'Testing', text: 'Testing' },\n    { id: 'Software Engineering', text: 'Software Engineering' },\n    { id: 'Git', text: 'Git' },\n    { id: 'Docker', text: 'Docker' },\n    { id: 'GraphQL', text: 'GraphQL' },\n    { id: 'REST API', text: 'REST API' },\n    { id: 'AWS', text: 'AWS' },\n    { id: 'Azure', text: 'Azure' },\n    { id: 'SQL', text: 'SQL' },\n    { id: 'NoSQL', text: 'NoSQL' },\n    { id: 'TypeScript', text: 'TypeScript' },\n    { id: 'Sass', text: 'Sass' },\n    { id: 'PHP', text: 'PHP' },\n    { id: 'Ruby', text: 'Ruby' },\n    { id: 'Elixir', text: 'Elixir' },\n    { id: 'Flutter', text: 'Flutter' },\n    { id: 'Kotlin', text: 'Kotlin' },\n    { id: 'Swift', text: 'Swift' },\n];\n\nconst MyPostForm = () => {\n    const { navigateToList } = usePostsNavigation();\n\n    const { postFormState, postFormDispatcher, savePost, fetchStatus } = useMyPosts();\n\n    const { postTags, currentVisibilityMode, postCategory, postTitle, markdownContent } = postFormState;\n    const { categoryName } = postCategory || {};\n\n    const handleCancel = () => {\n        navigateToList();\n    }\n\n    const handleSave = async () => {\n        const postResponse = await savePost();\n        if(postResponse){\n            setTimeout(() => {\n                navigateToList();\n            }, 1300);\n        }\n    }\n\n    const handleSelectTags = (tagsList) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_TAGS, payload: tagsList });\n    }\n\n    const handleTagCreate = (tag) => {\n        // call create api\n        // save the new one to postTags state\n    }\n\n    const handleVisibilityModeChange = (newMode) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_VISIBILITY, payload: newMode });\n    }\n\n\n    const handleMarkdownChange = (value) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_CONTENT, payload: value });\n    }\n\n    const handlePostTitleChange = (value) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_TITLE, payload: value });\n    }\n\n    const handlePostCategoryChange = (id, option) => {\n        postFormDispatcher({ type: POST_ACTIONS.SET_CATEGORY, payload: option });\n    }\n\n\n    if(fetchStatus === 'loading'){\n        return <div className=\"m-5\">\n            <Stencil />\n            <Stencil />\n            <Stencil />\n            <Stencil />\n            <Stencil />\n        </div>\n    }\n\n    if(fetchStatus === 'failure'){\n        return <div>Failed</div>\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"text-default m-5\">\n                <div className=\"flex my-2\">\n                    <span onClick={handleCancel} className=\"flex text-sm p-2 bg-default hover-accent hover-text-custom rounded-md cursor-pointer mx-1\">\n                        <span className=\"flex items-center pr-2\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-circle-chevron-left\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"m14 16-4-4 4-4\" /></svg>\n                        </span>\n                        Go Back\n                    </span>\n                    <div className=\"flex text-sm p-2 bg-highlight rounded-md cursor-pointer mx-1\">\n                        <PostCategory category={postCategory} onChange={handlePostCategoryChange} />\n                    </div>\n                </div>\n                <div className=\"flex justify-between w-full \">\n                    <div className=\"flex flex-col w-3/4\">\n                        <div>\n                            <BreadCrumbs items={[categoryName || 'Select a category', postTitle]} />\n                        </div>\n                        {/*<div className=\"flex\">\n                            <Tags textBoxFieldProps={{ size: 'sm', placeholder: 'Choose tags (press Enter to add)' }} tags={postTags} onChange={handleSelectTags} onCreate={handleTagCreate} suggestions={tagsSuggestions} />\n                        </div>*/}\n                    </div>\n                    <div className=\"flex flex-col\">\n                        <div className=\"\">\n                            <PostVisibilitySelector onChange={handleVisibilityModeChange} currentMode={currentVisibilityMode} />\n                        </div>\n                        <div onClick={handleSave} className=\"bg-accent border border-accent hover-text-default hover-border-accent hover-transparent text-custom text-sm my-2 p-1 px-2 cursor-pointer rounded-md\">\n                            <span className=\"flex\">\n                                Save\n                                <span className=\"text-xs bg-secondary text-secondary border border-secondary px-1 mx-1 rounded-md\">⌘ + Enter</span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"editing-note py-2 bg-default shadow-xl rounded-lg\">\n                    <EditableText className=\"text-default text-lg mx-2\" text={postTitle} onSave={handlePostTitleChange} />\n                    <div className=\"h-screen-1/2s overflow-scrolls\">\n                        <MarkdownEditor content={markdownContent} onChange={handleMarkdownChange} isPreviewEnabled />\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default MyPostForm;"],"names":["_ref","items","links","itemsLength","length","_jsx","className","children","map","item","index","isLastItem","_jsxs","React","Link","to","concat","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","MyPostForm","navigateToList","usePostsNavigation","postFormState","postFormDispatcher","savePost","fetchStatus","useMyPosts","postTags","currentVisibilityMode","postCategory","postTitle","markdownContent","categoryName","Stencil","onClick","handleCancel","cx","cy","r","PostCategory","category","onChange","handlePostCategoryChange","id","option","type","POST_ACTIONS","SET_CATEGORY","payload","BreadCrumbs","PostVisibilitySelector","newMode","SET_VISIBILITY","currentMode","async","setTimeout","EditableText","text","onSave","value","SET_TITLE","MarkdownEditor","content","SET_CONTENT","isPreviewEnabled"],"sourceRoot":""}