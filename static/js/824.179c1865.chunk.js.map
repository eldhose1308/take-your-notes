{"version":3,"file":"static/js/824.179c1865.chunk.js","mappings":"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","sources":["_modules/postCategories/_components/MainCategorySelector.js","_pages/myCategories/form/MyCategoriesForm.js","_services/postsCategories.service.js","_api/postsCategories.api.js"],"sourcesContent":["import React, { useState } from \"react\"\n\nimport TextBoxWithSuggestions from \"_components/UI/TextBoxWithSuggestions/TextBoxWithSuggestions\";\n\nconst MainCategorySelector = (props) => {\n    const { mainCategories = [], suggestions=[], onChange = () => { }, onCreate = () => { }, className, ...textBoxProps } = props;\n    const extraProps = {\n        placeholder: 'Type and press Enter to select',\n        labelName: 'Related Tags',\n    }\n\n    const [value, setValue] = useState('')\n\n    const removeItem = (index) => {\n        const newTags = mainCategories.slice(0, index).concat(mainCategories.slice(index + 1))\n        return newTags\n    }\n\n\n    const handleRemoveTag = (index) => {\n        const newTags = removeItem(index)\n        onChange(newTags)\n    }\n\n    const handleRemoveAll = () => {\n        onChange([])\n        // focus to textbox\n    }\n\n    const handleKeyDown = (value, e) => {\n        if (e.key === 'Enter') {\n            if (!value) { return }\n            setValue('')\n            onCreate(value)\n        }\n\n        if (e.key === 'Backspace' && value.length === 0) {\n            const tagsSize = mainCategories.length\n            const tagsWithoutLastOne = removeItem(tagsSize - 1)\n            onChange(tagsWithoutLastOne)\n        }\n    }\n\n    const handleChange = (value, e) => {\n        setValue(value)\n    }\n\n    const handleSuggestionClick = (id, selectedValues) => {\n        onChange(selectedValues)\n        // setValue('')\n    }\n\n    const handleCreate = (value, selectedValues) => {\n        // alert('Create')\n        onCreate(value)\n        setValue('')\n    }\n\n    return (\n        <React.Fragment>\n            <div>\n            <div className={`flex max-w-mds justify-ends text-default  ${className}`}>\n                {mainCategories.map((tag, index) => {\n                    const { mainCategoryName: tagItem } = tag;\n                    return (\n                    <div key={index} className=\"flex bg-custom mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"mx-1 px-2 py-1\">#{tagItem}</span>\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={() => handleRemoveTag(index)}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-x\"><path d=\"M18 6 6 18\" /><path d=\"m6 6 12 12\" /></svg>\n                        </span>\n                    </div>\n                )})}\n                {mainCategories.length > 2 && (\n                    <div className=\"flex mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={handleRemoveAll}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-delete\"><path d=\"M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\" /><line x1=\"18\" x2=\"12\" y1=\"9\" y2=\"15\" /><line x1=\"12\" x2=\"18\" y1=\"9\" y2=\"15\" /></svg>\n                        </span>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex justify-ends\">\n                <div className=\"min-w-md\">\n                    <TextBoxWithSuggestions {...extraProps} {...textBoxProps} onKeyDown={handleKeyDown} onChange={handleChange} onSuggestionClick={handleSuggestionClick} onCreate={handleCreate} value={value} selectedOptions={mainCategories} suggestions={suggestions} labelKey=\"mainCategoryName\" idKey=\"id\" hasCreateNew={false} />\n                </div>\n            </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default MainCategorySelector","import React, { useEffect, useReducer, useState } from \"react\";\n\nimport { Card, CardHeader, CardContent, CardFooter } from \"_components/Misc/Card/Card\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport { Button, TextBox } from \"_components/Form\";\nimport MainCategorySelector from \"_modules/postCategories/_components/MainCategorySelector\";\nimport { Alerts } from \"_components/UI\";\n\nimport * as postsCategoriesService from \"_services/postsCategories.service\";\nimport { useParams } from \"react-router-dom\";\n\n\nconst buttonCreateStateValues = {\n    none: 'Create',\n    loading: 'Creating',\n    failure: 'Failed',\n    completed: 'Created',\n}\n\nconst buttonUpdateStateValues = {\n    none: 'Update',\n    loading: 'Updating',\n    failure: 'Failed',\n    completed: 'Updated',\n}\n\nconst MyCategoriesForm = (props) => {\n    const { id: categorySlug } = useParams();\n\n    const { categoryModalData, onClose = () => { } } = props;\n    const { data = {}, onClick } = categoryModalData || {};\n    const { categoryName = '' } = data;\n\n    const buttonStateValues = categorySlug ? buttonUpdateStateValues : buttonCreateStateValues;\n    const heading = `${categorySlug ? 'Update Category' : 'Create Category'}`;\n    const subHeading = `Are you sure you want to ${categorySlug ? `update the category` : 'create a new category'}?`;\n\n    const [selectedMainCategories, setSelectedMainCategories] = useState([]);\n    const [mainCategories, setMainCategories] = useState([]);\n\n    const [categoryId, setCategoryId] = useState();\n    const [newFolderName, setNewFolderName] = useState(categoryName);\n    const [buttonStatus, setButtonStatus] = useState('none');\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n   \n    const validatePostCategory = (categoryName) => {\n        if (!categoryName) {\n            setErrorMessage('Please enter a category name');\n            return false;\n        }\n        setErrorMessage('');\n        return true;\n    }\n\n    const handleMainCategorySelect = (selectedMainCategory) => {\n        setSelectedMainCategories(selectedMainCategory);\n    }\n\n    const handleSubmitClick = async () => {\n        const selectedMainCategoriesIds = selectedMainCategories.map((category) => category.id);\n        const isValid = validatePostCategory(newFolderName);\n        const newCategoryPayload = {\n            category_name: newFolderName,\n            main_category_ids: selectedMainCategoriesIds\n        };\n        if (!isValid) {\n            return\n        }\n\n        if (categorySlug) {\n            setButtonStatus('loading');\n            try {\n                const postsResponse = await postsCategoriesService.updatePostCategory(newCategoryPayload, categoryId);\n                // await onClick(newCategoryPayload, categorySlug);\n                setButtonStatus('completed');               \n            } catch (err) {\n                setButtonStatus('failure');\n                setErrorMessage(err);\n            } finally {\n                setTimeout(() => {\n                    setButtonStatus('none');\n                }, 1000)\n            }\n            return;\n        }\n    }\n\n    useEffect(() => {\n        setNewFolderName(categoryName)\n    }, [categoryName])\n\n\n    useEffect(() => {\n        const fetchMainCategories = async () => {\n            try {\n                const mainCategoriesData = await postsCategoriesService.getMainPostsCategories();\n                setMainCategories(mainCategoriesData);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        fetchMainCategories();\n    }, [])\n\n\n    useEffect(() => {\n        if (!categorySlug) {\n            return\n        }\n\n        const fetchUsersPostItem = async () => {\n            try {\n                setFetchStatus('loading');\n                const postCategoryData = await postsCategoriesService.getAuthPostsCategoriesBySlug(categorySlug);\n                const { id: categoryId, mainCategories, categoryName } = postCategoryData || {};\n               \n                setCategoryId(categoryId);\n                setNewFolderName(categoryName);\n                setSelectedMainCategories(mainCategories);\n\n                setFetchStatus('success');\n            } catch (error) {\n                setFetchStatus('failure');\n            }\n        }\n\n        fetchUsersPostItem();\n    }, [categorySlug])\n\n\n    return (\n        <React.Fragment>\n            <div className=\"flex flex-col\">\n\n            {/* <Card variant='ghost' rounded='lg'>\n                <CardHeader> */}\n                <div className=\"flex flex-col px-3 py-2\">\n\n                    <Typography size='lg'>{heading}</Typography>\n                    <Typography size='xs' textVariant='default'>{subHeading}</Typography>\n                    {categorySlug ? <Typography size='xs' textVariant='bold'>{categoryName}</Typography> : null}\n                </div>\n                {/* </CardHeader>\n\n                <CardContent> */}\n                <div className=\"flex flex-col mx-3 px-3 py-2 bg-default\">\n                <div className=\"my-3\">\n                    <TextBox\n                        type='text'\n                        labelName='New category name'\n                        placeholder=\"Enter category name\"\n                        value={newFolderName}\n                        onChange={setNewFolderName}\n                        size='sm'\n                        isFocused\n                        validationMsg={{\n                            type: 'error',\n                            messages: [errorMessage]\n                        }}\n                    />\n                    </div>\n\n                    <div className=\"my-3\">\n                        <MainCategorySelector mainCategories={selectedMainCategories} onChange={handleMainCategorySelect} suggestions={mainCategories} />\n                        {/* <Tags textBoxFieldProps={{ size: 'sm', placeholder: 'Choose tags (press Enter to add)' }} tags={[]} onChange={()=>{}} suggestions={mainCategories} /> */}\n                    </div>\n\n\n                    <Alerts type='info'>\n                    <Typography textVariant='light' size='xs'>- While creating a new category, please verify the main categories/tags below.</Typography>\n                    <Typography textVariant='light' size='xs'>- This ensures your category and posts can be easily found in user suggestions and properly grouped for processing.</Typography>\n                    \n                        </Alerts>\n                   \n</div>\n\n                {/* </CardContent>\n\n                <CardFooter className='p-0 flex justify-between'> */}\n                <div className=\"items-center px-2 py-4 flex justify-between\">\n\n                    <Button size='xs' width='none' variant='custom' onClick={()=>{}}>Cancel</Button>\n                    <Button size='xs' width='none' variant='accent' onClick={handleSubmitClick} buttonStatus={buttonStatus}>\n                        {buttonStateValues[buttonStatus]}\n                    </Button>\n                </div>\n                {/* </CardFooter>\n            </Card> */}\n            </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default MyCategoriesForm;","import * as postsCategories from '_api/postsCategories.api'\nimport { formatToLocalTime } from '_utils/timestampUtils';\n\nexport const formatPostCategoryData = (data) => {\n    const { category_name, category_slug, category_icon, posts_count, followers_count, created_at, full_name: created_by='Admin', user_name: createdUserName, category_id, is_following, verified } = data;\n    const formattedResponse = { id: category_id, categoryName: category_name, categorySlug: category_slug, categoryIcon: category_icon, followers: followers_count, posts: posts_count, createdUser: created_by, createdUserName, createdAt: formatToLocalTime(created_at), isFollowing: !!is_following, isVerified: !!Number(verified) };\n    return formattedResponse;\n}\n    \nexport const formatPostMainCategoryData = (data) => {\n    const { main_category_name, main_category_slug, created_at, main_category_id } = data;\n    const formattedResponse = { id: main_category_id, mainCategoryName: main_category_name, mainCategorySlug: main_category_slug, createdAt: formatToLocalTime(created_at) };\n    return formattedResponse;\n}\n\n\nexport const formatPostMainCategoryAndCategoryData = (data) => {\n    const { main_categories, ...categoryData } = data;\n    const categoryDataFormatted = formatPostCategoryData(categoryData);\n    const mainCategoryDataFormatted = main_categories.map(formatPostMainCategoryData);\n    const formattedResponse = { ...categoryDataFormatted, mainCategories: mainCategoryDataFormatted };\n    return formattedResponse;\n}\n\n\nconst getAuthPostsCategories = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.getAuthPostsCategories(data, config);\n        const { data: foldersData = [] } = response;\n        const foldersFormatted = foldersData.map(formatPostCategoryData)\n        return foldersFormatted || []\n    }catch(err){\n        throw err;\n    }\n}\n\nconst getAuthPostsCategoriesBySlug = async (data, config = {}) => {\n    const response = await postsCategories.getAuthPostsCategoryBySlug(data, config);\n    const { data: foldersData = [] } = response;\n    const foldersFormatted = formatPostMainCategoryAndCategoryData(foldersData);\n    return foldersFormatted || []\n}\n\nconst getMainPostsCategories = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.getMainPostsCategories(data, config);\n        const { data: foldersData = [] } = response;\n        const foldersFormatted = foldersData.map(formatPostMainCategoryData);\n        return foldersFormatted || []\n    }catch(err){\n        throw err;\n    }\n}\n\nconst getPostsCategories = async (data, config = {}) => {\n    try{\n\n        const response = await postsCategories.getPostsCategories(data, config);\n        const { data: foldersData = [] } = response;\n        const foldersFormatted = foldersData.map(formatPostCategoryData);\n        return foldersFormatted || []\n    }catch(err){\n        throw err;\n    }\n}\n\nconst getPostsCategoryBySlug = async (data, config = {}) => {\n    const response = await postsCategories.getPostsCategoryBySlug(data, config);\n    const { data: foldersData = [] } = response;\n    const foldersFormatted = formatPostCategoryData(foldersData);\n    return foldersFormatted || {}\n}\n\n\nconst followCategory = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.followCategory(data, config);\n        return true\n    }catch(err){\n        throw err;\n    }\n}\n\nconst unFollowCategory = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.unFollowCategory(data, config);\n        return true\n    }catch(err){\n        throw err;\n    }\n}\n\n\n// const getFolderById = async (id, config={}) => {\n//     const response = await folders.getFolderById(id, config)\n//     return response || []\n// }\n\n\nconst savePostCategory = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.savePostCategory(data, config);\n        const { data: folderData = [] } = response;\n        const formattedFolderData = formatPostCategoryData(folderData);\n        return formattedFolderData;\n    }catch(err){\n        throw err;\n    }\n}\n\n\nconst updatePostCategory = async (data, id, config = {}) => {\n    try{\n        const response = await postsCategories.updatePostCategory(data, id, config);\n        const { data: folderData = [] } = response;\n        return formatPostCategoryData(folderData);\n    }catch(err){\n        throw err;\n    }\n}\n\n\nconst deletePostCategory = async (id, config = {}) => {\n    try{\n        const response = await postsCategories.deletePostCategory(id, config)\n        return response;\n    }catch(err){\n        throw err;\n    }  \n}\n\n\nconst restorePostCategory = async (id, config = {}) => {\n    try{\n        const response = await postsCategories.restorePostCategory(id, config)\n        return response;\n    }catch(err){\n        throw err;\n    }  \n}\n\n\n\nexport {\n    getMainPostsCategories,\n\n    getAuthPostsCategoriesBySlug,\n    getAuthPostsCategories,\n    getPostsCategories,\n    getPostsCategoryBySlug,\n\n    followCategory,\n    unFollowCategory,\n\n    savePostCategory,\n    updatePostCategory,\n    deletePostCategory,\n    restorePostCategory\n}","import { BASE_URL } from \"_constants\";\nimport { AccessAPI } from \"_utils\";\nimport { constructUrl } from \"_utils/AccessAPI\";\n\nconst getAuthPostsCategories = async (data, config = {}) => {\n    const postsURL = constructUrl(BASE_URL + 'postCategories/my', data);\n    return new AccessAPI(postsURL).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\n\nconst getAuthPostsCategoryBySlug = async (data, config = {}) => {\n    return new AccessAPI(`${BASE_URL}postCategories/my/${data}`).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err.response\n    })\n}\n\nconst getMainPostsCategories = async (data, config = {}) => {\n    const postsURL = constructUrl(BASE_URL + 'postMainCategories', data);\n    return new AccessAPI(postsURL).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\n\nconst getPostsCategories = async (data, config = {}) => {\n    const postsURL = constructUrl(BASE_URL + 'postCategories', data);\n    return new AccessAPI(postsURL).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst getPostsCategoryBySlug = async (data, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${data}`).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err.response\n    })\n}\n\nconst followCategory = async (categoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${categoryId}/follow`).post()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst unFollowCategory = async (categoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${categoryId}/unfollow`).post()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst savePostCategory = async (data, config = {}) => {\n    return new AccessAPI(BASE_URL + 'postCategories').post(data)\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst updatePostCategory = async (data, id, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${id}`).put(data)\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err.response\n    })\n}\n\nconst deletePostCategory = async (postCategoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${postCategoryId}`).delete()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst restorePostCategory = async (postCategoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${postCategoryId}/restore`).post()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nexport {\n    getMainPostsCategories,\n\n    getAuthPostsCategoryBySlug,\n    getAuthPostsCategories,\n    getPostsCategories,\n    getPostsCategoryBySlug,\n\n    followCategory,\n    unFollowCategory,\n\n    savePostCategory,\n    updatePostCategory,\n    deletePostCategory,\n    restorePostCategory\n}"],"names":["props","mainCategories","suggestions","onChange","onCreate","className","textBoxProps","value","setValue","useState","removeItem","index","slice","concat","_jsx","React","children","_jsxs","map","tag","mainCategoryName","tagItem","onClick","newTags","handleRemoveTag","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","length","handleRemoveAll","x1","x2","y1","y2","TextBoxWithSuggestions","placeholder","labelName","onKeyDown","handleKeyDown","e","key","tagsSize","tagsWithoutLastOne","handleChange","onSuggestionClick","handleSuggestionClick","id","selectedValues","handleCreate","selectedOptions","labelKey","idKey","hasCreateNew","buttonCreateStateValues","none","loading","failure","completed","buttonUpdateStateValues","categorySlug","useParams","categoryModalData","onClose","data","categoryName","buttonStateValues","heading","subHeading","selectedMainCategories","setSelectedMainCategories","setMainCategories","categoryId","setCategoryId","newFolderName","setNewFolderName","buttonStatus","setButtonStatus","fetchStatus","setFetchStatus","errorMessage","setErrorMessage","useEffect","async","mainCategoriesData","postsCategoriesService","err","console","log","fetchMainCategories","postCategoryData","error","fetchUsersPostItem","Typography","size","textVariant","TextBox","type","isFocused","validationMsg","messages","MainCategorySelector","selectedMainCategory","Alerts","Button","variant","selectedMainCategoriesIds","category","isValid","validatePostCategory","newCategoryPayload","category_name","main_category_ids","setTimeout","formatPostCategoryData","category_slug","category_icon","posts_count","followers_count","created_at","full_name","created_by","user_name","createdUserName","category_id","is_following","verified","categoryIcon","followers","posts","createdUser","createdAt","formatToLocalTime","isFollowing","isVerified","Number","formatPostMainCategoryData","main_category_name","main_category_slug","main_category_id","mainCategorySlug","getAuthPostsCategories","response","postsURL","constructUrl","BASE_URL","AccessAPI","get","then","res","catch","postsCategories","foldersData","getAuthPostsCategoriesBySlug","foldersFormatted","main_categories","categoryData","formatPostMainCategoryAndCategoryData","getMainPostsCategories","getPostsCategories","getPostsCategoryBySlug","followCategory","post","unFollowCategory","savePostCategory","folderData","updatePostCategory","put","deletePostCategory","postCategoryId","delete","restorePostCategory"],"sourceRoot":""}