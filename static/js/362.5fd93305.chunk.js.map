{"version":3,"file":"static/js/362.5fd93305.chunk.js","mappings":"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","sources":["_modules/togglers/_constants/verifiedNonVerified.js","_modules/togglers/VerifiedNonVerifiedToggler.js","_pages/myCategories/list/MyCategoriesList.js"],"sourcesContent":["export const VERIFY_MODES = {\n    verified: 'verified',\n    pending: 'pending',\n    rejected: 'rejected',\n}\n\nexport const verifiedStatusModes = [\n    { id: VERIFY_MODES.verified, label: 'Verified', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-circle-check-big\"><path d=\"M21.801 10A10 10 0 1 1 17 3.335\"/><path d=\"m9 11 3 3L22 4\"/></svg> },\n    { id: VERIFY_MODES.pending, label: 'Pending', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-clock-alert\"><path d=\"M12 6v6l4 2\"/><path d=\"M16 21.16a10 10 0 1 1 5-13.516\"/><path d=\"M20 11.5v6\"/><path d=\"M20 21.5h.01\"/></svg> },\n    { id: VERIFY_MODES.rejected, label: 'Rejected', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-octagon-x\"><path d=\"m15 9-6 6\"/><path d=\"M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z\"/><path d=\"m9 9 6 6\"/></svg> },\n];\n\n\nexport const filterQueryParamMappings = {\n    verified: { verified: 'verified' },\n    pending: { verified: 'unverified' },\n    rejected: { verified: 'rejected' },\n}\n","import React from \"react\";\n\nimport ModeSelector from \"_components/UI/ModeSelector/ModeSelector\";\n\nimport { filterQueryParamMappings, verifiedStatusModes } from \"./_constants/verifiedNonVerified\";\n\n\nconst currentMode = verifiedStatusModes[0].id;\nconst VerifiedNonVerifiedToggler = ({ onChange }) => {\n    \n    const handleChange = (id) => {\n        const filterQueryParams = filterQueryParamMappings[id];\n        onChange(filterQueryParams);\n    }\n\n    return (\n        <ModeSelector modes={verifiedStatusModes} onChange={handleChange} selectedValue={currentMode} renderLabel />\n\n    )\n}\n\nexport default VerifiedNonVerifiedToggler;","import React, { useState, useEffect } from \"react\";\n\nimport ShowMorePaginationWrapper from \"_components/Pagination/ShowMorePaginationWrapper\";\n\nimport CategoryFollowingsUnAuthorised from \"_components/DisplayStates/Error/CategoryFollowingsUnAuthorised\";\nimport useShowMorePagination from \"_components/Pagination/_hooks/useShowMorePagination\";\n\nimport { stringifyJSON } from \"_utils/json\";\nimport PostCategoryFilters from \"_modules/posts/_components/PostCategoryFilters\";\nimport usePostsCategories from \"_modules/posts/_hooks/usePostsCategories\";\nimport PostCategoriesListSuccess from \"_pages/postsCategories/states/PostCategoriesListSuccess\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport FollowUnfollowToggler from \"_modules/togglers/FollowUnfollowToggler\";\n\nimport { getUserDetailsOfCurrentUser } from \"_utils/userAuth\";\nimport { Stencil } from \"_components/Loader\";\nimport EmptyFollowingCategories from \"_components/DisplayStates/Empty/EmptyFollowingCategories\";\nimport useComponentFetchState from \"_hooks/useComponentFetchState\";\nimport VerifiedNonVerifiedToggler from \"_modules/togglers/VerifiedNonVerifiedToggler\";\n\nconst pageSize = 30;\nconst MyCategoriesList = () => {\n    const { fetchStatus, fetchMyPostCategories } = usePostsCategories();\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n\n    const [filters, setFilters] = useState({ verified: 'verified' });\n    const [data, setData] = useState([]);\n\n    const CategoriesComponentState = useComponentFetchState({\n        fetchStatus,\n        loading: <Stencil />,\n        empty: <EmptyFollowingCategories />,\n        unauthorised: <CategoryFollowingsUnAuthorised />,\n        success: <PostCategoriesListSuccess categoriesList={data} />\n    });\n\n    const { userName } = getUserDetailsOfCurrentUser();\n    const authorisedForListing = !(filters.filters === 'following' && !userName) && fetchStatus !== 'unauthorised';\n\n    const handleFiltersChange = async (newFilters) => {\n        const userFilters = { ...filters, ...newFilters };\n        setFilters(userFilters);\n        setData([]);\n        resetPagination();\n        const usersFilter = { page: 1, limit: pageSize, ...userFilters };\n        try {\n            const users = await fetchMyPostCategories(usersFilter);\n            checkIfAllDataFetched(users);\n            setData(users);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n\n    const fetchUsers = async () => {\n        const usersFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n        try {\n\n            const users = await fetchMyPostCategories(usersFilter) || [];\n            setData((previousUsers) => [...previousUsers, ...users]);\n\n            incrementPagination();\n            checkIfAllDataFetched(users);\n            return users;\n        } catch (err) {\n            console.error(err);\n            throw err;\n        }\n    }\n\n\n    useEffect(() => {\n        fetchUsers();\n    }, [])\n\n    return (\n        <div className=\"text-default m-5\">\n            <div className=\"flex\">\n\n                <div className=\"flex justify-between w-full\">\n                    <div className=\"flex flex-col mx-2 my-2\">\n                        <Typography size='lg' type='h2'>Your Categories</Typography>\n                        <Typography variant='secondary' size='sm' textVariant='default'>\n                            List of all the categories published by you (Verified/Pending/Rejected)\n                        </Typography>\n                    </div>\n                    <div className=\"flex\">\n                        <div className=\"content-center mx-2\">\n                            <VerifiedNonVerifiedToggler onChange={handleFiltersChange} currentMode='following' renderLabel />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-between w-full my-2\">\n                    {authorisedForListing && (\n                        <React.Fragment>\n                            <PostCategoryFilters onChange={handleFiltersChange} />\n                        </React.Fragment>\n                    )}\n                </div>\n\n            </div>\n            <div className=\"flex my-2\">\n                {/* {authorisedForListing ? ( */}\n                <ShowMorePaginationWrapper isEmpty={fetchStatus !== 'success'} initialFetchStatus={fetchStatus} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchUsers}>\n                    {/* <PostCategoriesListSuccess categoriesList={data} /> */}\n                    {/* {CategoriesComponentState} */}\n                    <PostCategoriesListSuccess categoriesList={data} />\n                </ShowMorePaginationWrapper>\n                {/* ) : (\n                    <CategoryFollowingsUnAuthorised />\n                )} */}\n            </div>\n        </div>\n    )\n}\n\nexport default MyCategoriesList;"],"names":["VERIFY_MODES","verifiedStatusModes","id","label","modeElement","_jsxs","xmlns","width","height","viewBox","fill","stroke","class","children","_jsx","d","filterQueryParamMappings","verified","pending","rejected","currentMode","_ref","onChange","ModeSelector","modes","selectedValue","renderLabel","MyCategoriesList","fetchStatus","fetchMyPostCategories","usePostsCategories","currentPage","isAllDataFetched","incrementPagination","checkIfAllDataFetched","resetPagination","useShowMorePagination","pageSize","filters","setFilters","useState","data","setData","userName","useComponentFetchState","loading","Stencil","empty","EmptyFollowingCategories","unauthorised","CategoryFollowingsUnAuthorised","success","PostCategoriesListSuccess","categoriesList","getUserDetailsOfCurrentUser","authorisedForListing","handleFiltersChange","async","userFilters","newFilters","usersFilter","page","limit","users","err","console","error","fetchUsers","previousUsers","useEffect","className","Typography","size","type","variant","textVariant","VerifiedNonVerifiedToggler","React","PostCategoryFilters","ShowMorePaginationWrapper","isEmpty","initialFetchStatus","fetchDataMethod"],"sourceRoot":""}