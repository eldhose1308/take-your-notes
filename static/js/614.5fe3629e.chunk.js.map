{"version":3,"file":"static/js/614.5fe3629e.chunk.js","mappings":"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","sources":["_components/DisplayStates/Empty/EmptyUserPosts.js","_modules/users/_hooks/useUserPosts.js","_pages/users/UsersPostList.js"],"sourcesContent":["import React from \"react\";\n\nimport Typography from \"_components/Misc/Typography/Typography\";\n\nconst EmptyUserPosts = () => {\n\n    return (\n        <div className='flex flex-col w-full items-center my-12'>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-folder-open\"><path d=\"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2\" /></svg>\n            <div className=\"flex flex-col items-center my-4 text-center\">\n                <Typography size='lg' type='h2'>Hmm...</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Nothing Here... Yet.</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Everyone starts somewhere. This user might post something soon!!</Typography>\n            </div>\n        </div>\n    )\n}\n\nexport default EmptyUserPosts;","import { useState, useEffect } from \"react\";\n\nimport * as usersService from '_services/users.service';\n\nconst useUserPosts = ({ userName }) => {\n    const [usersPostList, setUsersPostList] = useState([]);\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n\n    const fetchUsersPost = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const usersPostData = await usersService.getUsersPost(userName, filters);\n            setUsersPostList(usersPostData);\n            if(usersPostData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n            }\n            return usersPostData;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    }\n\n    useEffect(() => {\n        if (!userName) {\n            return;\n        }\n\n        fetchUsersPost();\n    }, [userName]);\n\n    return {\n        fetchStatus,\n        usersPostList,\n\n        fetchUsersPost\n    }\n}\n\nexport default useUserPosts","import React, { useEffect, useState } from \"react\";\n\nimport PostsSuccess from \"_pages/posts/states/PostsSuccess\";\nimport ShowMorePaginationWrapper from \"_components/Pagination/ShowMorePaginationWrapper\";\nimport PostFilters from \"_modules/posts/_components/PostFilters\";\nimport usePosts from \"_modules/posts/_hooks/usePosts\";\nimport useShowMorePagination from \"_components/Pagination/_hooks/useShowMorePagination\";\nimport useUserPosts from \"_modules/users/_hooks/useUserPosts\";\nimport { stringifyJSON } from \"_utils/json\";\nimport EmptyUserPosts from \"_components/DisplayStates/Empty/EmptyUserPosts\";\n\n\nconst UsersPostList = (props) => {\n    const { pageSize = 10, initialPage = 0, initialData = [], userName } = props;\n\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n    const { fetchUsersPost, fetchStatus } = useUserPosts({ userName });\n\n    const [filters, setFilters] = useState();\n    const [data, setData] = useState(initialData || []);\n\n    const handleFiltersChange = async (filters) => {\n        setFilters(filters);\n        setData([]);\n        resetPagination();\n        const postsFilter = { page: 1, limit: pageSize, ...filters };\n        const posts = await fetchUsersPost(postsFilter);\n        setData(posts);\n    }\n\n    const fetchPosts = async () => {\n        const postsFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n        const posts = await fetchUsersPost(postsFilter);\n        setData((previousPosts) => [...previousPosts, ...posts]);\n\n        incrementPagination();\n        checkIfAllDataFetched(posts);\n        return posts;\n    }\n\n\n    useEffect(() => {\n        fetchPosts();\n    }, [])\n\n    return (\n        <React.Fragment>\n            {fetchStatus !== 'empty' ? (\n                <React.Fragment>\n                    <PostFilters onChange={handleFiltersChange} />\n                    <ShowMorePaginationWrapper key={`posts_${stringifyJSON(filters)}`} isEmpty={fetchStatus === 'empty'} initialFetchStatus={fetchStatus} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchPosts}>\n                    <React.Fragment>\n                        {fetchStatus !== 'empty' ? (\n                            <PostsSuccess usersPostList={data} />\n                        ) : (\n                            <EmptyUserPosts />\n                        )}\n                    </React.Fragment>\n                    </ShowMorePaginationWrapper>\n                </React.Fragment>\n            ) : (\n                <EmptyUserPosts />\n            )}\n        </React.Fragment>\n    )\n}\n\nexport default UsersPostList;"],"names":["EmptyUserPosts","_jsxs","className","children","_jsx","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","class","d","Typography","size","type","variant","textVariant","_ref","userName","usersPostList","setUsersPostList","useState","fetchStatus","setFetchStatus","fetchUsersPost","async","usersPostData","usersService","filters","length","error","useEffect","props","pageSize","initialPage","initialData","currentPage","isAllDataFetched","incrementPagination","checkIfAllDataFetched","resetPagination","useShowMorePagination","useUserPosts","setFilters","data","setData","fetchPosts","postsFilter","page","limit","posts","previousPosts","React","PostFilters","onChange","ShowMorePaginationWrapper","isEmpty","initialFetchStatus","fetchDataMethod","PostsSuccess","concat","stringifyJSON"],"sourceRoot":""}