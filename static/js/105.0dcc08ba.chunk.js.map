{"version":3,"file":"static/js/105.0dcc08ba.chunk.js","mappings":"sKAIA,MAcA,EAduBA,KAGfC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0CAAyCC,SAAA,EACpDC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQC,MAAM,4BAA2BX,UAACC,EAAAA,EAAAA,KAAA,QAAMW,EAAE,yLAC9Nd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8CAA6CC,SAAA,EACxDC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACC,KAAK,KAAKC,KAAK,KAAIf,SAAC,YAChCC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACG,QAAQ,YAAYF,KAAK,KAAKG,YAAY,UAASjB,SAAC,0BAChEC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACG,QAAQ,YAAYF,KAAK,KAAKG,YAAY,UAASjB,SAAC,0E,uDCVhF,MAgBA,EAhBqBkB,IACjB,MAAM,MAAEC,EAAM,GAAMD,EAEpB,OACIjB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,SAClBoB,MAAMC,KAAK,CAAEC,OAAQH,IAASI,KAAKC,IAChC1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oCACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yCACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yCACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2CAA6C,eAAA0B,OAJAD,OAMlE,C,yICFd,MAgCA,EAhC8BN,IAC1B,MAAM,SAAEQ,EAAQ,SAAEC,GAAaT,GACzB,cAAEU,EAAa,eAAEC,EAAc,YAAEC,IAAgBC,EAAAA,EAAAA,GAAa,CAAEL,aAEhEM,EAAkBC,EAAAA,EAAcC,YAAYR,GAE5CS,GAA2BC,EAAAA,EAAAA,GAAuB,CACpDN,cACAO,SAASpC,EAAAA,EAAAA,KAACqC,EAAAA,GAAO,IACjBC,SAAStC,EAAAA,EAAAA,KAACuC,EAAAA,EAAiB,CAACZ,cAAeA,MAW/C,OAREa,EAAAA,EAAAA,YAAU,KACCf,GAILG,EAAe,CAAEa,KAAM,EAAGC,MAAO,GAAI,GACtC,CAACjB,KAGJzB,EAAAA,EAAAA,KAAC2C,EAAAA,SAAc,CAAA5C,UACXC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAwB,CACrBC,aAAcA,KAAMhD,EAAAA,EAAAA,MAAA,QAAMC,UAAU,OAAMC,SAAA,CAAC,cAAUC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAI,CAACC,GAAIhB,EAAiBjC,UAAU,iBAAgBC,SAAE2B,OAC5GsB,aAAcA,KAAMhD,EAAAA,EAAAA,KAACiD,EAAAA,EAAa,CAACC,QAASnB,IAAoBhC,SAE/DmC,KAEQ,C,+FClCzB,MA0BA,EA1B2BjB,IACvB,MAAM,cAAEU,EAAgB,IAAOV,EAE/B,OACIjB,EAAAA,EAAAA,KAAC2C,EAAAA,SAAc,CAAA5C,SACV4B,EAAcL,KAAK6B,IAChB,MAAM,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,SAAEC,GAAaJ,GAC1C,SAAE1B,GAAa6B,GACf,aAAEE,EAAY,aAAEC,GAAiBF,EACjCG,GAAkBC,EAAAA,EAAAA,IAA0BlC,EAAU4B,GAE5D,OACIrD,EAAAA,EAAAA,KAAC8C,EAAAA,GAAI,CAACC,GAAIW,EAAgB3D,UACtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wEAAuEC,SAAA,EAClFC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACE,KAAK,OAAMf,SAAGqD,KAC1BpD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAiB,CAACJ,aAAcA,EAAcC,aAAcA,UAGlE,KAGF,C,2GCnBzB,MAmCA,EAnC0BxC,IAEtB,MAAM,aAAE4C,EAAY,aAAEC,GAAe,EAAK,SAAEC,GAAW,EAAK,gBAAEC,GAAkB,GAAS/C,GACnF,aAAEuC,EAAY,aAAEC,EAAY,aAAEQ,EAAY,UAAEC,EAAS,MAAEC,GAAUN,GAAgB,CAAC,EAElF9B,EAAkBC,EAAAA,EAAcoC,gBAAgBX,GAEtD,OACIzD,EAAAA,EAAAA,KAAC2C,EAAAA,SAAc,CAAA5C,UAEXC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAI,CAACC,GAAIhB,EAAiBjC,UAAU,6BAA4BC,UAC7DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAAoBC,KAAMd,EAAce,IAAG,GAAA/C,OAAKgD,EAAAA,IAAiBhD,OAAGyC,IAA9DA,MAEjBjE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EACzCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,4BAA2BC,SAAEyD,KAC3CxD,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mDAAkDC,UAC9DF,EAAAA,EAAAA,MAAA,OAAKI,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQX,UAAU,qCAAoCC,SAAA,EAACC,EAAAA,EAAAA,KAAA,UAAQyE,GAAG,KAAKC,GAAG,KAAKC,EAAE,QAAO3E,EAAAA,EAAAA,KAAA,QAAMW,EAAE,0BAGjRmD,IAAgBjE,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wCAAuCC,SAAA,CAAEmE,EAAU,gBAChFH,IAAYlE,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wCAAuCC,SAAA,CAAEoE,EAAM,yBAMhF,C,0DCpCzB,MAqCA,EArCqBS,IAAmB,IAAlB,SAAEnD,GAAUmD,EAC9B,MAAOjD,EAAekD,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CjD,EAAakD,IAAkBD,EAAAA,EAAAA,UAAS,QA2B/C,OARAtC,EAAAA,EAAAA,YAAU,KAGN,GAGD,CAACf,IAEG,CACHI,cACAF,gBAEAC,eA5BmBoD,UACnB,IACID,EAAe,WACf,MAAME,QAAsBC,EAAAA,GAA0BzD,EAAU0D,GAOhE,OANAN,EAAiBI,GACW,IAAzBA,EAAc5D,OACb0D,EAAe,SAEfA,EAAe,WAEZE,CACX,CAAC,MAAMG,GACHL,EAAe,UACnB,GAgBH,C,uMClCL,MAAMM,EAAe,CACjB,KAAQ,CACJC,MAAMzF,EAAAA,EAAAA,MAAA,OAAKI,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQX,UAAU,iCAAgCC,SAAA,EAACC,EAAAA,EAAAA,KAAA,QAAMW,EAAE,8BAA4BX,EAAAA,EAAAA,KAAA,UAAQyE,GAAG,KAAKC,GAAG,IAAIC,EAAE,OAAK3E,EAAAA,EAAAA,KAAA,QAAMW,EAAE,sBAC7S4E,KAAM,YAEV,MAAS,CACLD,MAAMzF,EAAAA,EAAAA,MAAA,OAAKI,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,QAAQX,UAAU,gCAA+BC,SAAA,EAACC,EAAAA,EAAAA,KAAA,QAAMW,EAAE,8BAA6BX,EAAAA,EAAAA,KAAA,UAAQyE,GAAG,KAAKC,GAAG,IAAIC,EAAE,OAAM3E,EAAAA,EAAAA,KAAA,QAAMW,EAAE,cAAaX,EAAAA,EAAAA,KAAA,QAAMW,EAAE,iBACnU4E,KAAM,WAqDd,EAjDsBtE,IAClB,MAAM,aAAEwC,EAAY,WAAE+B,EAAU,YAAEC,GAAY,EAAK,eAAEC,EAAeA,SAAM,SAAEC,EAAWA,SAAS,WAAEC,EAAaA,UAAc3E,EAoC7H,OACIjB,EAAAA,EAAAA,KAAA,OAAK6F,QAdWb,UACZQ,EAIDC,EAfgBT,WACnB,UACUc,EAAAA,GAAwCN,GAC9CE,GAAeK,IAAiB,IAAUA,EAAmB7B,UAAW8B,OAAOD,EAAkB7B,WAAa,EAAGuB,aAAcM,EAAkBN,eAErJ,CAAC,MAAMQ,GACHC,MAAMD,EAAIE,QACd,GASIC,GA1BapB,WACjB,UACUc,EAAAA,GAAsCN,GAC5CE,GAAeK,IAAiB,IAAUA,EAAmB7B,UAAW8B,OAAOD,EAAkB7B,WAAa,EAAGuB,aAAcM,EAAkBN,eAErJ,CAAC,MAAMQ,GACHC,MAAMD,EAAIE,QACd,GAqBIE,GANAH,MAAM,SAOV,EAK2BpG,UAAU,sHAAqHC,UACtJF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,oBAAmBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,yBAAwBC,SACnCsF,EAAaI,GAAaH,OAE9BD,EAAaI,GAAaF,SAE7B,E,kCClDd,MAuDA,EAvDgCtE,IAE5B,MAAM,aAAE4C,EAAe,CAAC,GAAM5C,GACvBqF,EAAeC,IAAoBzB,EAAAA,EAAAA,UAASjB,IAC3C2C,GAAIhB,EAAU,aAAE/B,EAAY,aAAED,EAAY,IAAEiD,EAAG,UAAEC,EAAS,YAAEC,EAAW,gBAAEC,EAAe,MAAEzC,EAAK,UAAED,EAAS,KAAE2C,EAAI,YAAEpB,GAAgBa,EAG1I,OACIzG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAE7CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCC,EAAAA,EAAAA,KAAC8G,EAAAA,EAAgB,CAACjD,aAAcyC,KAChCzG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EAEjBC,EAAAA,EAAAA,KAAC+G,EAAAA,EAAW,CACRC,aAAc,CAAEC,MAAOxD,EAAc8B,KAAM/B,EAAc0D,SAAUlF,EAAAA,EAAcoC,gBAAgBX,IACjG0D,UAAU,oBAGdnH,EAAAA,EAAAA,KAACoH,EAAY,CAAC5B,WAAYA,EAAY/B,aAAcA,EAAcgC,YAAaA,EAAaC,eAAgBa,WAKpHvG,EAAAA,EAAAA,KAACqH,EAAAA,EAAS,CAACtG,QAAQ,aACnBlB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACtCC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAAAb,SAAEoE,KACbnE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACC,KAAK,KAAKG,YAAY,OAAMjB,SAAC,cAE7CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UACfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACtCC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAAAb,SAAEmE,KACblE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACC,KAAK,KAAKG,YAAY,OAAMjB,SAAC,qBAIjDC,EAAAA,EAAAA,KAACqH,EAAAA,EAAS,CAACtG,QAAQ,aAEnBf,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIF,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACI,YAAY,OAAMjB,SAAA,CAAC,eAAWC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACE,KAAK,OAAMf,SAAE2G,QACnE7G,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACI,YAAY,OAAMjB,SAAA,CAAC,aAASC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACE,KAAK,OAAMf,UAACC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAI,CAACC,GAAIf,EAAAA,EAAcC,YAAY2E,GAAiB7G,SAAE4G,gBAK5HF,IAAOzG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UAChCC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACI,YAAY,OAAMjB,SAAE0G,QAGlC,E,0EChDd,MA0DA,EAxD4BxF,IACxB,MAAM,aAAEuC,GAAiBvC,GAEnB,YAAEqG,EAAW,iBAAEC,EAAgB,oBAAEC,EAAmB,sBAAEC,EAAqB,gBAAEC,IAAoBC,EAAAA,EAAAA,GAAsB,CAAEC,SALlH,MAMP,eAAEC,EAAc,YAAEhG,IAAgBiG,EAAAA,EAAAA,MAEjC3C,EAAS4C,IAAcjD,EAAAA,EAAAA,UAAS,CAAEvB,SAAUC,KAC5CwE,EAAMC,IAAWnD,EAAAA,EAAAA,UAAS,IAiB3BoD,EAAalD,UACf,MAAMmD,EAAc,CAAE1F,KAAM6E,EAAc,EAAG5E,MA3BpC,MA2BwDyC,GACjE,IACI,MAAMhB,QAAc0D,EAAeM,GAKnC,OAJAF,GAASG,GAAkB,IAAIA,KAAkBjE,KAEjDqD,IACAC,EAAsBtD,GACfA,CACX,CAAC,MAAMkE,GAEH,MADAC,QAAQC,IAAIF,GACNA,CACV,GAQJ,OAJA7F,EAAAA,EAAAA,YAAU,KACN0F,GAAY,GACb,KAGCrI,EAAAA,EAAAA,MAAC8C,EAAAA,SAAc,CAAA5C,SAAA,EACXC,EAAAA,EAAAA,KAACwI,EAAAA,EAAW,CAACC,SArCOzD,UACxB,MAAM0D,EAAsB,IAAKvD,KAAYwD,GAC7CZ,EAAWW,GACXT,EAAQ,IACRP,IACA,MAAMS,EAAc,CAAE1F,KAAM,EAAGC,MAhBtB,MAgB0CgG,GACnD,IACI,MAAMvE,QAAc0D,EAAeM,GACnCV,EAAsBtD,GACtB8D,EAAQ9D,EACZ,CAAC,MAAMkE,GACHC,QAAQC,IAAIF,EAChB,MA0BIrI,EAAAA,EAAAA,KAAC4I,EAAAA,EAAyB,CAACC,WAAYjJ,EAAAA,EAAwDkJ,mBAAoBjH,EAAayF,YAAaA,EAAaC,iBAAkBA,EAAkBwB,gBAAiBb,EAAWnI,UACtNC,EAAAA,EAAAA,KAAC2C,EAAAA,SAAc,CAAA5C,UACXC,EAAAA,EAAAA,KAACgJ,EAAAA,EAAY,CAACrH,cAAeqG,OAChB,SAAAxG,QAHgDyH,EAAAA,EAAAA,GAAc9D,OAKtE,E,cClDzB,MAqDA,EArD4B+D,KACxB,MAAM,aAAE1F,IAAiB2F,EAAAA,EAAAA,OAEnB,aAAEtF,EAAY,YAAEhC,EAAW,wBAAEuH,IAA4BC,EAAAA,EAAAA,KACzDnH,GAA2BC,EAAAA,EAAAA,GAAuB,CACpDN,cACAO,SAASpC,EAAAA,EAAAA,KAACsJ,EAAAA,EAAW,IACrBC,SAAU,CACNC,QAAS,CACLC,QAAS,0DACTC,YAAa,2BAGrBpH,SAAStC,EAAAA,EAAAA,KAAC2J,EAAsB,CAAC9F,aAAcA,IAC/C2F,SAASxJ,EAAAA,EAAAA,KAAC2J,EAAsB,CAAC9F,aAAcA,MAOnD,OAJArB,EAAAA,EAAAA,YAAU,KACN4G,EAAwB5F,EAAa,GACtC,CAACA,KAGAxD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,CAE7CmC,GACDlC,EAAAA,EAAAA,KAAC4J,EAAkB,CAAoBpG,aAAcA,GAA5BA,OAI7BxD,EAAAA,EAAAA,KAAC6J,EAAAA,EAAgB,CAACC,UAAU,QAAO/J,UAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAEzCC,EAAAA,EAAAA,KAAC+J,EAAAA,EAAoB,CAACjJ,KAAK,UAAU2C,aAAcD,KAEnDxD,EAAAA,EAAAA,KAACgK,EAAAA,EAAe,KAEhBhK,EAAAA,EAAAA,KAAC4C,EAAAA,EAAwB,CACrB6G,QAAQ,uBACRzG,aAAcA,KAAMhD,EAAAA,EAAAA,KAAA,QAAMF,UAAU,6BAA4BC,SAAC,wBAS/E,C,sJCtDV,MAwDA,EAxDuBkB,IACnB,MAAM,SAAE2G,EAAW,GAAE,YAAEqC,EAAc,EAAC,YAAEC,EAAc,GAAE,SAAEzI,GAAaR,GAEjE,YAAEqG,EAAW,iBAAEC,EAAgB,oBAAEC,EAAmB,sBAAEC,EAAqB,gBAAEC,IAAoBC,EAAAA,EAAAA,GAAsB,CAAEC,cACzH,eAAEhG,EAAc,YAAEC,IAAgBC,EAAAA,EAAAA,GAAa,CAAEL,cAEhD0D,EAAS4C,IAAcjD,EAAAA,EAAAA,aACvBkD,EAAMC,IAAWnD,EAAAA,EAAAA,UAASoF,GAAe,IAY1ChC,EAAalD,UACf,MAAMmD,EAAc,CAAE1F,KAAM6E,EAAc,EAAG5E,MAAOkF,KAAazC,GAC3DhB,QAAcvC,EAAeuG,GAKnC,OAJAF,GAASG,GAAkB,IAAIA,KAAkBjE,KAEjDqD,IACAC,EAAsBtD,GACfA,CAAK,EAQhB,OAJA3B,EAAAA,EAAAA,YAAU,KACN0F,GAAY,GACb,KAGClI,EAAAA,EAAAA,KAAC2C,EAAAA,SAAc,CAAA5C,SACM,UAAhB8B,GACGhC,EAAAA,EAAAA,MAAC8C,EAAAA,SAAc,CAAA5C,SAAA,EACXC,EAAAA,EAAAA,KAACwI,EAAAA,EAAW,CAACC,SA7BDzD,UACxB+C,EAAW5C,GACX8C,EAAQ,IACRP,IACA,MAAMS,EAAc,CAAE1F,KAAM,EAAGC,MAAOkF,KAAazC,GAC7ChB,QAAcvC,EAAeuG,GACnCV,EAAsBtD,GACtB8D,EAAQ9D,EAAM,KAuBFnE,EAAAA,EAAAA,KAAC4I,EAAAA,EAAyB,CAAyCuB,QAAyB,UAAhBtI,EAAyBiH,mBAAoBjH,EAAayF,YAAaA,EAAaC,iBAAkBA,EAAkBwB,gBAAiBb,EAAWnI,UAChOC,EAAAA,EAAAA,KAAC2C,EAAAA,SAAc,CAAA5C,SACM,UAAhB8B,GACG7B,EAAAA,EAAAA,KAACgJ,EAAAA,EAAY,CAACrH,cAAeqG,KAE7BhI,EAAAA,EAAAA,KAACJ,EAAAA,EAAc,OAEN,SAAA4B,QAPwByH,EAAAA,EAAAA,GAAc9D,SAW3DnF,EAAAA,EAAAA,KAACJ,EAAAA,EAAc,KAEN,C","sources":["_components/DisplayStates/Empty/EmptyUserPosts.js","_components/Loader/CardStencil.js","_modules/additionalContents/AdditionalUsersPosts.js","_modules/additionalContents/_components/MiniUserPostsList.js","_modules/posts/_components/PostCategoryInfo.js","_modules/users/_hooks/useUserPosts.js","_modules/postCategories/_components/FollowButton.js","_modules/posts/_components/PostCategoryDetailCard.js","_pages/postsCategories/CategoriesPostList.js","_pages/postsCategories/PostsCategoriesPage.js","_pages/users/UsersPostList.js"],"sourcesContent":["import React from \"react\";\n\nimport Typography from \"_components/Misc/Typography/Typography\";\n\nconst EmptyUserPosts = () => {\n\n    return (\n        <div className='flex flex-col w-full items-center my-12'>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-folder-open\"><path d=\"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2\" /></svg>\n            <div className=\"flex flex-col items-center my-4 text-center\">\n                <Typography size='lg' type='h2'>Hmm...</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Nothing Here... Yet.</Typography>\n                <Typography variant='secondary' size='sm' textVariant='default'>Everyone starts somewhere. This user might post something soon!!</Typography>\n            </div>\n        </div>\n    )\n}\n\nexport default EmptyUserPosts;","import React from \"react\";\n\nconst CardStencil = (props) => {\n    const { count=1 } = props;\n\n    return (\n        <div className=\"w-full\">\n            {Array.from({ length: count }).map((index) => (\n                <div className=\"w-full animate-pulse my-10\" key={`cardStencil_${index}`}>\n                    <div className=\"h-12 bg-custom rounded-md mb-3\"></div>\n                    <div className=\"h-3 bg-custom rounded-md mb-3 w-1/2\"></div>\n                    <div className=\"h-3 bg-custom rounded-md mb-3 w-3/4\"></div>\n                    <div className=\"h-3 bg-custom rounded-md mb-3 w-full\"></div>\n                </div>))}\n        </div>\n    );\n};\n\nexport default CardStencil;\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Stencil } from \"_components/Loader\";\n\nimport useUserPosts from \"_modules/users/_hooks/useUserPosts\";\nimport useComponentFetchState from \"_hooks/useComponentFetchState\";\nimport AdditionalContentSection from \"_components/Misc/AdditionalContentSection\";\nimport MiniUserPostsList from \"./_components/MiniUserPostsList\";\nimport CLIENT_ROUTES from \"_routes/clientRoutes\";\nimport SeeMoreButton from \"_components/Misc/SeeMoreButton\";\n\nconst AdditionalUsersPosts = (props) => {\n    const { userName, fullName } = props;\n    const { usersPostList, fetchUsersPost, fetchStatus } = useUserPosts({ userName });\n\n    const userDetailRoute = CLIENT_ROUTES.USER_DETAIL(userName);\n    \n    const UserDetailComponentState = useComponentFetchState({\n        fetchStatus,\n        loading: <Stencil />,\n        success: <MiniUserPostsList usersPostList={usersPostList} />\n    });\n\n      useEffect(() => {\n            if (!userName) {\n                return;\n            }\n    \n            fetchUsersPost({ page: 1, limit: 6 });\n        }, [userName]);\n\n    return (\n        <React.Fragment>\n            <AdditionalContentSection\n                renderHeader={() => <span className=\"flex\">More from <Link to={userDetailRoute} className=\"text-bold mx-2\">{fullName}</Link></span>}\n                renderFooter={() => <SeeMoreButton linkUrl={userDetailRoute} />}\n            >\n                {UserDetailComponentState}\n            </AdditionalContentSection>\n        </React.Fragment>\n    )\n}\n\nexport default AdditionalUsersPosts;","import Typography from \"_components/Misc/Typography/Typography\";\nimport PostCategoryBadge from \"_modules/postCategories/_components/PostCategoryBadge\";\nimport { routeBasedOnAuthorisation } from \"_utils/userAuth\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst MiniUserPostsList = (props) => {\n    const { usersPostList = [] } = props;\n\n    return (\n        <React.Fragment>\n            {usersPostList.map((userPosts) => {\n                const { postTitle, postSlug, user, category } = userPosts;\n                const { userName } = user;\n                const { categoryName, categorySlug } = category;\n                const postDetailRoute = routeBasedOnAuthorisation(userName, postSlug);\n\n                return (\n                    <Link to={postDetailRoute}>\n                        <div className=\"flex flex-col my-3 p-2 border-b border-custom hover-custom rounded-md\">\n                            <Typography type='span' >{postTitle}</Typography>\n                            <div className=\"flex\">\n                                <PostCategoryBadge categoryName={categoryName} categorySlug={categorySlug} />\n                            </div>\n                        </div>\n                    </Link>\n                )\n            })}\n        </React.Fragment>\n    )\n}\n\nexport default MiniUserPostsList;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Avatar from \"_components/UI/Avatar/Avatar\";\nimport CLIENT_ROUTES from \"_routes/clientRoutes\";\nimport { CATEGORY_ICON_URL } from \"_constants/API\";\nimport FollowButton from \"_modules/users/_component/FollowButton\";\n\n\nconst PostCategoryInfo = (props) => {\n\n    const { categoryData, hasFollowers = false, hasPosts = false, hasFollowButton = true } = props;\n    const { categoryName, categorySlug, categoryIcon, followers, posts } = categoryData || {};\n\n    const userDetailRoute = CLIENT_ROUTES.CATEGORY_DETAIL(categorySlug);\n\n    return (\n        <React.Fragment>\n\n            <Link to={userDetailRoute} className='cursor-pointer group-hover'>\n                <div className=\"flex items-center mb-2\">\n                    <div className=\"flex\">\n                        <Avatar key={categoryIcon} name={categoryName} src={`${CATEGORY_ICON_URL}${categoryIcon}`} />\n                    </div>\n                    <div className=\"flex flex-col\">\n                        <div className=\"flex items-center\">\n                            <div className=\"flex flex-col justify-center\">\n                                <div className=\"flex\">\n                                    <h3 className=\"text-sm text-default px-3\">{categoryName}</h3>\n                                    <span className=\"text-center ml-1 mr-4 invisible group-hover-item\">\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-circle-chevron-right\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"m10 8 4 4-4 4\" /></svg>\n                                    </span>\n                                </div>\n                                {hasFollowers && <p className=\"text-secondary px-3 space-y-1 text-xs\">{followers} followers</p>}\n                                {hasPosts && <p className=\"text-secondary px-3 space-y-1 text-xs\">{posts} posts</p>}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Link>\n        </React.Fragment>\n    )\n}\n\nexport default PostCategoryInfo;","import { useState, useEffect } from \"react\";\n\nimport * as usersService from '_services/users.service';\n\nconst useUserPosts = ({ userName }) => {\n    const [usersPostList, setUsersPostList] = useState([]);\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n\n    const fetchUsersPost = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const usersPostData = await usersService.getUsersPost(userName, filters);\n            setUsersPostList(usersPostData);\n            if(usersPostData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n            }\n            return usersPostData;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    }\n\n    useEffect(() => {\n        if (!userName) {\n            return;\n        }\n\n        // fetchUsersPost();\n    }, [userName]);\n\n    return {\n        fetchStatus,\n        usersPostList,\n\n        fetchUsersPost\n    }\n}\n\nexport default useUserPosts","import React from \"react\";\n\nimport * as postsCategoriesService from '_services/postsCategories.service';\n\nconst FOLLOW_STATE = {\n    'true': {\n        icon: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-user-round-check\"><path d=\"M2 21a8 8 0 0 1 13.292-6\"/><circle cx=\"10\" cy=\"8\" r=\"5\"/><path d=\"m16 19 2 2 4-4\"/></svg>,\n        text: 'Unfollow'\n    },\n    'false': {\n        icon: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-user-round-plus\"><path d=\"M2 21a8 8 0 0 1 13.292-6\" /><circle cx=\"10\" cy=\"8\" r=\"5\" /><path d=\"M19 16v6\" /><path d=\"M22 19h-6\" /></svg>,\n        text: 'Follow'\n    }\n}\n\nconst FollowButton = (props) => {\n    const { categorySlug, categoryId, isFollowing=false, updateCategory=()=>{}, onFollow = () => { }, onUnFollow = () => { } } = props;\n\n\n    const handleFollow = async () => {\n        try{\n            await postsCategoriesService.followCategory(categoryId);\n            updateCategory(previousUserState => ({ ...previousUserState, followers: Number(previousUserState.followers) + 1, isFollowing: !previousUserState.isFollowing }));\n            // await onFollow();\n        }catch(err){\n            alert(err.message);\n        }\n    }\n\n    const handleUnFollow = async () => {\n        try{\n            await postsCategoriesService.unFollowCategory(categoryId);\n            updateCategory(previousUserState => ({ ...previousUserState, followers: Number(previousUserState.followers) - 1, isFollowing: !previousUserState.isFollowing }));\n            // await onFollow();\n        }catch(err){\n            alert(err.message);\n        }\n    }\n\n    const handleClick = async () => {\n        if(!categoryId){\n            alert('Nopeee')\n            return;\n        }\n        if(isFollowing){\n            handleUnFollow();\n        }else{\n            handleFollow();\n        }\n    }\n\n\n    return (\n        <div onClick={handleClick} className=\"flex bg-custom text-accent hover-text-custom hover-accent text-xs my-2 mr-2 ml-4 p-2 px-2 cursor-pointer rounded-md\">\n            <span className=\"flex items-center\">\n                <span className=\"flex items-center mr-2\">\n                    {FOLLOW_STATE[isFollowing].icon}\n                </span>\n                {FOLLOW_STATE[isFollowing].text}\n            </span>\n        </div>\n    )\n}\n\nexport default FollowButton","import React, { useState } from \"react\";\n\nimport Separator from \"_components/Misc/Separator/Separator\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport ShareButton from \"_components/UI/ShareButton/ShareButton\";\nimport FollowButton from \"_modules/postCategories/_components/FollowButton\";\nimport PostCategoryInfo from \"./PostCategoryInfo\";\nimport CLIENT_ROUTES from \"_routes/clientRoutes\";\nimport { Link } from \"react-router-dom\";\n\nconst PostCategoryDetailCard = (props) => {\n\n    const { categoryData = {} } = props;\n    const [categoryState, setCategoryState] = useState(categoryData);\n    const { id: categoryId, categorySlug, categoryName, bio, createdAt, createdUser, createdUserName, posts, followers, rank, isFollowing } = categoryState;\n\n\n    return (\n        <div className=\"border bg-default p-4 rounded-md\">\n\n            <div className=\"flex justify-between\">\n                <PostCategoryInfo categoryData={categoryState} />\n                <div className=\"flex\">\n\n                    <ShareButton\n                        shareDetails={{ title: categorySlug, text: categoryName, urlRoute: CLIENT_ROUTES.CATEGORY_DETAIL(categorySlug) }}\n                        shareText='Share Category'\n                    />\n\n                    <FollowButton categoryId={categoryId} categorySlug={categorySlug} isFollowing={isFollowing} updateCategory={setCategoryState} />\n                </div>\n            </div>\n\n\n            <Separator variant='default' />\n            <div className=\"flex my-2\">\n                <div className=\"flex flex-col text-center\">\n                    <Typography>{posts}</Typography>\n                    <Typography size='xs' textVariant='none'>Posts</Typography>\n                </div>\n                <div className=\"mx-4\"></div>\n                <div className=\"flex flex-col text-center\">\n                    <Typography>{followers}</Typography>\n                    <Typography size='xs' textVariant='none'>Followers</Typography>\n                </div>\n            </div>\n\n            <Separator variant='default' />\n\n            <div className=\"flex my-2\">\n                <div>\n                    <Typography textVariant='none'>Created at <Typography type='span'>{createdAt}</Typography></Typography>\n                    <Typography textVariant='none'>Added by <Typography type='span'><Link to={CLIENT_ROUTES.USER_DETAIL(createdUserName)}>{createdUser}</Link></Typography></Typography>\n                </div>\n            </div>\n\n\n            {!!bio && <div className=\"flex my-4\">\n                <Typography textVariant='none'>{bio}</Typography>\n            </div>}\n\n        </div>\n    )\n}\n\nexport default PostCategoryDetailCard;","import React, { useEffect, useState } from \"react\";\n\nimport PostsSuccess from \"_pages/posts/states/PostsSuccess\";\n\nimport ShowMorePaginationWrapper from \"_components/Pagination/ShowMorePaginationWrapper\";\nimport PostFilters from \"_modules/posts/_components/PostFilters\";\nimport EmptyUserPosts from \"_components/DisplayStates/Empty/EmptyUserPosts\";\n\nimport usePosts from \"_modules/posts/_hooks/usePosts\";\nimport useShowMorePagination from \"_components/Pagination/_hooks/useShowMorePagination\";\n\nimport { stringifyJSON } from \"_utils/json\";\n\nconst pageSize = 30;\n\nconst CategoriesPostList = (props) => {\n    const { categoryName } = props;\n\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n    const { fetchPostsData, fetchStatus } = usePosts();\n\n    const [filters, setFilters] = useState({ category: categoryName });\n    const [data, setData] = useState([]);\n\n    const handleFiltersChange = async (newFilters) => {\n        const categoryPostFilters = { ...filters, ...newFilters };\n        setFilters(categoryPostFilters);\n        setData([]);\n        resetPagination();\n        const postsFilter = { page: 1, limit: pageSize, ...categoryPostFilters };\n        try{\n            const posts = await fetchPostsData(postsFilter);\n            checkIfAllDataFetched(posts);\n            setData(posts);\n        }catch(e){\n            console.log(e);\n        }\n    }\n\n    const fetchPosts = async () => {\n        const postsFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n        try{\n            const posts = await fetchPostsData(postsFilter);\n            setData((previousPosts) => [...previousPosts, ...posts]);\n            \n            incrementPagination();\n            checkIfAllDataFetched(posts);\n            return posts;\n        }catch(e){\n            console.log(e);\n            throw e;\n        }\n    }\n\n\n    useEffect(() => {\n        fetchPosts();\n    }, [])\n\n    return (\n        <React.Fragment>\n            <PostFilters onChange={handleFiltersChange} />\n            <ShowMorePaginationWrapper EmptyState={EmptyUserPosts} key={`posts_${stringifyJSON(filters)}`} initialFetchStatus={fetchStatus} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchPosts}>\n                <React.Fragment>\n                    <PostsSuccess usersPostList={data} />\n                </React.Fragment>\n            </ShowMorePaginationWrapper>\n        </React.Fragment>\n    )\n}\n\nexport default CategoriesPostList;","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport ResponsiveDrawer from \"_components/UI/Drawer/ResponsiveDrawer\";\nimport AdditionalContentSection from \"_components/Misc/AdditionalContentSection\";\nimport AdditionalUsersPosts from \"_modules/additionalContents/AdditionalUsersPosts\";\nimport AdditionalUsers from \"_modules/additionalContents/AdditionalUsers\";\nimport useComponentFetchState from \"_hooks/useComponentFetchState\";\nimport CardStencil from \"_components/Loader/CardStencil\";\nimport usePostsCategories from \"_modules/posts/_hooks/usePostsCategories\";\nimport UsersPostList from \"_pages/users/UsersPostList\";\nimport PostCategoryDetailCard from \"_modules/posts/_components/PostCategoryDetailCard\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport CategoriesPostList from \"./CategoriesPostList\";\nimport AdditionalCategories from \"_modules/additionalContents/AdditionalCategories\";\n\n\nconst PostsCategoriesPage = () => {\n    const { categoryName } = useParams();\n\n    const { categoryData, fetchStatus, fetchPostCategoryByName } = usePostsCategories();\n    const UserDetailComponentState = useComponentFetchState({\n        fetchStatus,\n        loading: <CardStencil />,\n        messages: {\n            failure: {\n                heading: 'Looks like this user is removed or no such user existed',\n                description: 'Please recheck the url'\n            }\n        },\n        success: <PostCategoryDetailCard categoryData={categoryData} />,\n        failure: <PostCategoryDetailCard categoryData={categoryData} />\n    });\n\n    useEffect(() => {\n        fetchPostCategoryByName(categoryName);\n    }, [categoryName])\n\n    return (\n        <div className=\"text-default m-5\">\n        <div className=\"flex\">\n            <div className=\"flex flex-col mx-2 grow-3 basis-0\">\n\n                {UserDetailComponentState}\n                <CategoriesPostList key={categoryName} categoryName={categoryName} />\n\n            </div>\n\n            <ResponsiveDrawer direction='right'>\n                <div className=\"flex flex-col grow-1 basis-0\">\n                   \n                    <AdditionalCategories type='related' categorySlug={categoryName} />\n\n                    <AdditionalUsers />\n\n                    <AdditionalContentSection\n                        heading='Posts You Might Like'\n                        renderFooter={() => <span className=\"flex w-full justify-center\">See more</span>}\n                    >\n                        {/* <AdditionalUsersPosts userName={userName} /> */}\n                    </AdditionalContentSection>\n\n                </div>\n            </ResponsiveDrawer>\n\n        </div>\n    </div>\n    )\n}\n\nexport default PostsCategoriesPage;","import React, { useEffect, useState } from \"react\";\n\nimport PostsSuccess from \"_pages/posts/states/PostsSuccess\";\nimport ShowMorePaginationWrapper from \"_components/Pagination/ShowMorePaginationWrapper\";\nimport PostFilters from \"_modules/posts/_components/PostFilters\";\nimport usePosts from \"_modules/posts/_hooks/usePosts\";\nimport useShowMorePagination from \"_components/Pagination/_hooks/useShowMorePagination\";\nimport useUserPosts from \"_modules/users/_hooks/useUserPosts\";\nimport { stringifyJSON } from \"_utils/json\";\nimport EmptyUserPosts from \"_components/DisplayStates/Empty/EmptyUserPosts\";\n\n\nconst UsersPostList = (props) => {\n    const { pageSize = 30, initialPage = 0, initialData = [], userName } = props;\n\n    const { currentPage, isAllDataFetched, incrementPagination, checkIfAllDataFetched, resetPagination } = useShowMorePagination({ pageSize });\n    const { fetchUsersPost, fetchStatus } = useUserPosts({ userName });\n\n    const [filters, setFilters] = useState();\n    const [data, setData] = useState(initialData || []);\n\n    const handleFiltersChange = async (filters) => {\n        setFilters(filters);\n        setData([]);\n        resetPagination();\n        const postsFilter = { page: 1, limit: pageSize, ...filters };\n        const posts = await fetchUsersPost(postsFilter);\n        checkIfAllDataFetched(posts);\n        setData(posts);\n    }\n\n    const fetchPosts = async () => {\n        const postsFilter = { page: currentPage + 1, limit: pageSize, ...filters };\n        const posts = await fetchUsersPost(postsFilter);\n        setData((previousPosts) => [...previousPosts, ...posts]);\n\n        incrementPagination();\n        checkIfAllDataFetched(posts);\n        return posts;\n    }\n\n\n    useEffect(() => {\n        fetchPosts();\n    }, [])\n\n    return (\n        <React.Fragment>\n            {fetchStatus !== 'empty' ? (\n                <React.Fragment>\n                    <PostFilters onChange={handleFiltersChange} />\n                    <ShowMorePaginationWrapper key={`posts_${stringifyJSON(filters)}`} isEmpty={fetchStatus === 'empty'} initialFetchStatus={fetchStatus} currentPage={currentPage} isAllDataFetched={isAllDataFetched} fetchDataMethod={fetchPosts}>\n                    <React.Fragment>\n                        {fetchStatus !== 'empty' ? (\n                            <PostsSuccess usersPostList={data} />\n                        ) : (\n                            <EmptyUserPosts />\n                        )}\n                    </React.Fragment>\n                    </ShowMorePaginationWrapper>\n                </React.Fragment>\n            ) : (\n                <EmptyUserPosts />\n            )}\n        </React.Fragment>\n    )\n}\n\nexport default UsersPostList;"],"names":["EmptyUserPosts","_jsxs","className","children","_jsx","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","class","d","Typography","size","type","variant","textVariant","props","count","Array","from","length","map","index","concat","userName","fullName","usersPostList","fetchUsersPost","fetchStatus","useUserPosts","userDetailRoute","CLIENT_ROUTES","USER_DETAIL","UserDetailComponentState","useComponentFetchState","loading","Stencil","success","MiniUserPostsList","useEffect","page","limit","React","AdditionalContentSection","renderHeader","Link","to","renderFooter","SeeMoreButton","linkUrl","userPosts","postTitle","postSlug","user","category","categoryName","categorySlug","postDetailRoute","routeBasedOnAuthorisation","PostCategoryBadge","categoryData","hasFollowers","hasPosts","hasFollowButton","categoryIcon","followers","posts","CATEGORY_DETAIL","Avatar","name","src","CATEGORY_ICON_URL","cx","cy","r","_ref","setUsersPostList","useState","setFetchStatus","async","usersPostData","usersService","filters","error","FOLLOW_STATE","icon","text","categoryId","isFollowing","updateCategory","onFollow","onUnFollow","onClick","postsCategoriesService","previousUserState","Number","err","alert","message","handleUnFollow","handleFollow","categoryState","setCategoryState","id","bio","createdAt","createdUser","createdUserName","rank","PostCategoryInfo","ShareButton","shareDetails","title","urlRoute","shareText","FollowButton","Separator","currentPage","isAllDataFetched","incrementPagination","checkIfAllDataFetched","resetPagination","useShowMorePagination","pageSize","fetchPostsData","usePosts","setFilters","data","setData","fetchPosts","postsFilter","previousPosts","e","console","log","PostFilters","onChange","categoryPostFilters","newFilters","ShowMorePaginationWrapper","EmptyState","initialFetchStatus","fetchDataMethod","PostsSuccess","stringifyJSON","PostsCategoriesPage","useParams","fetchPostCategoryByName","usePostsCategories","CardStencil","messages","failure","heading","description","PostCategoryDetailCard","CategoriesPostList","ResponsiveDrawer","direction","AdditionalCategories","AdditionalUsers","initialPage","initialData","isEmpty"],"sourceRoot":""}