{"version":3,"file":"static/js/400.6b5f1f94.chunk.js","mappings":"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","sources":["_modules/modals/CategoryCreateModal.js","_modules/postCategories/_components/MainCategorySelector.js","_modules/posts/_hooks/usePostsCategories.js","_services/postsCategories.service.js","_api/postsCategories.api.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Dialog from \"_components/UI/Dialog/Dialog\";\nimport { Card, CardHeader, CardContent, CardFooter } from \"_components/Misc/Card/Card\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport { Button, TextBox } from \"_components/Form\";\nimport Tags from \"_components/UI/Tags/Tags\";\n\nimport * as postsCategoriesService from \"_services/postsCategories.service\";\nimport MainCategorySelector from \"_modules/postCategories/_components/MainCategorySelector\";\nimport { Alerts } from \"_components/UI\";\nimport useEscClose from \"_hooks/useEscClose\";\n\nconst buttonCreateStateValues = {\n    none: 'Create',\n    loading: 'Creating',\n    failure: 'Failed',\n    completed: 'Created',\n}\n\nconst buttonUpdateStateValues = {\n    none: 'Update',\n    loading: 'Updating',\n    failure: 'Failed',\n    completed: 'Updated',\n}\n\nconst CategoryCreateModal = (props) => {\n    const { categoryModalData, onClose = () => { } } = props;\n    const { status, data = {}, onClick } = categoryModalData || {};\n    const { id, categoryName = '' } = data;\n\n    const buttonStateValues = id ? buttonUpdateStateValues : buttonCreateStateValues;\n    const heading = `${id ? 'Update Category' : 'Create Category'}`;\n    const subHeading = `Are you sure you want to ${id ? `update the category` : 'create a new category'}?`;\n\n    const [selectedMainCategories, setSelectedMainCategories] = useState([]);\n    const [mainCategories, setMainCategories] = useState([]);\n\n    const [newFolderName, setNewFolderName] = useState(categoryName);\n    const [buttonStatus, setButtonStatus] = useState('none');\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const closeModal = () => {\n        onClose();\n        setNewFolderName('');\n    }\n\n    useEscClose(closeModal, status);\n\n\n    const handleCancelClick = () => {\n        closeModal();\n    }\n\n    const validatePostCategory = (categoryName) => {\n        if (!categoryName) {\n            setErrorMessage('Please enter a category name');\n            return false;\n        }\n        setErrorMessage('');\n        return true;\n    }\n\n    const handleMainCategorySelect = (selectedMainCategory) => {\n        setSelectedMainCategories(selectedMainCategory);\n    }\n\n    const handleSubmitClick = async () => {\n        const selectedMainCategoriesIds = selectedMainCategories.map((category) => category.id);\n        const isValid = validatePostCategory(newFolderName);\n        const newCategoryPayload = {\n            category_name: newFolderName,\n            main_category_ids: selectedMainCategoriesIds\n        };\n        if (!isValid) {\n            return\n        }\n        if (onClick) {\n            setButtonStatus('loading');\n            try {\n                await onClick(newCategoryPayload, id);\n                setButtonStatus('completed');\n                setTimeout(() => {\n                    closeModal();\n                }, 1000);\n            } catch (err) {\n                setButtonStatus('failure');\n                setErrorMessage(err);\n            } finally {\n                setTimeout(() => {\n                    setButtonStatus('none');\n                }, 1000)\n            }\n            return;\n        }\n        closeModal();\n    }\n\n    useEffect(() => {\n        setNewFolderName(categoryName)\n    }, [categoryName])\n\n\n    useEffect(() => {\n        const fetchMainCategories = async () => {\n            try {\n                const mainCategoriesData = await postsCategoriesService.getMainPostsCategories();\n                setMainCategories(mainCategoriesData);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        fetchMainCategories();\n    }, [])\n\n\n\n    if (!status) {\n        return null;\n    }\n\n    return (\n        <Dialog isShown hasOverlay size='lg' >\n            <Card variant='ghost' rounded='lg'>\n                <CardHeader>\n                    <Typography size='lg'>{heading}</Typography>\n                    <Typography size='xs' textVariant='default'>{subHeading}</Typography>\n                    {id ? <Typography size='xs' textVariant='bold'>{categoryName}</Typography> : null}\n                </CardHeader>\n\n                <CardContent>\n                    <TextBox\n                        type='text'\n                        labelName='New category name'\n                        placeholder=\"Enter category name\"\n                        value={newFolderName}\n                        onChange={setNewFolderName}\n                        size='sm'\n                        isFocused\n                        validationMsg={{\n                            type: 'error',\n                            messages: [errorMessage]\n                        }}\n                    />\n\n                    <div className=\"my-3\">\n                        <MainCategorySelector mainCategories={selectedMainCategories} onChange={handleMainCategorySelect} suggestions={mainCategories} />\n                        {/* <Tags textBoxFieldProps={{ size: 'sm', placeholder: 'Choose tags (press Enter to add)' }} tags={[]} onChange={()=>{}} suggestions={mainCategories} /> */}\n                    </div>\n\n                    <Alerts type='info'>\n                    <Typography textVariant='light' size='xs'>- While creating a new category, please verify the main categories/tags below.</Typography>\n                    <Typography textVariant='light' size='xs'>- This ensures your category and posts can be easily found in user suggestions and properly grouped for processing.</Typography>\n                    \n                        </Alerts>\n                   \n                </CardContent>\n\n                <CardFooter className='p-0 flex justify-between'>\n                    <Button size='xs' width='none' variant='custom' onClick={handleCancelClick}>Cancel</Button>\n                    <Button size='xs' width='none' variant='accent' onClick={handleSubmitClick} buttonStatus={buttonStatus}>\n                        {buttonStateValues[buttonStatus]}\n                    </Button>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}\n\nexport default CategoryCreateModal;","import React, { useState } from \"react\"\n\nimport TextBoxWithSuggestions from \"_components/UI/TextBoxWithSuggestions/TextBoxWithSuggestions\";\n\nconst MainCategorySelector = (props) => {\n    const { mainCategories = [], suggestions=[], onChange = () => { }, onCreate = () => { }, className, ...textBoxProps } = props;\n    const extraProps = {\n        placeholder: 'Type and press Enter to select',\n        labelName: 'Related Tags',\n    }\n\n    const [value, setValue] = useState('')\n\n    const removeItem = (index) => {\n        const newTags = mainCategories.slice(0, index).concat(mainCategories.slice(index + 1))\n        return newTags\n    }\n\n\n    const handleRemoveTag = (index) => {\n        const newTags = removeItem(index)\n        onChange(newTags)\n    }\n\n    const handleRemoveAll = () => {\n        onChange([])\n        // focus to textbox\n    }\n\n    const handleKeyDown = (value, e) => {\n        if (e.key === 'Enter') {\n            if (!value) { return }\n            setValue('')\n            onCreate(value)\n        }\n\n        if (e.key === 'Backspace' && value.length === 0) {\n            const tagsSize = mainCategories.length\n            const tagsWithoutLastOne = removeItem(tagsSize - 1)\n            onChange(tagsWithoutLastOne)\n        }\n    }\n\n    const handleChange = (value, e) => {\n        setValue(value)\n    }\n\n    const handleSuggestionClick = (id, selectedValues) => {\n        onChange(selectedValues)\n        // setValue('')\n    }\n\n    const handleCreate = (value, selectedValues) => {\n        // alert('Create')\n        onCreate(value)\n        setValue('')\n    }\n\n    return (\n        <React.Fragment>\n            <div>\n            <div className={`flex max-w-mds justify-ends text-default  ${className}`}>\n                {mainCategories.map((tag, index) => {\n                    const { mainCategoryName: tagItem } = tag;\n                    return (\n                    <div key={index} className=\"flex bg-custom mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"mx-1 px-2 py-1\">#{tagItem}</span>\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={() => handleRemoveTag(index)}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-x\"><path d=\"M18 6 6 18\" /><path d=\"m6 6 12 12\" /></svg>\n                        </span>\n                    </div>\n                )})}\n                {mainCategories.length > 2 && (\n                    <div className=\"flex mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={handleRemoveAll}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-delete\"><path d=\"M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\" /><line x1=\"18\" x2=\"12\" y1=\"9\" y2=\"15\" /><line x1=\"12\" x2=\"18\" y1=\"9\" y2=\"15\" /></svg>\n                        </span>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex justify-ends\">\n                <div className=\"min-w-md\">\n                    <TextBoxWithSuggestions {...extraProps} {...textBoxProps} onKeyDown={handleKeyDown} onChange={handleChange} onSuggestionClick={handleSuggestionClick} onCreate={handleCreate} value={value} selectedOptions={mainCategories} suggestions={suggestions} labelKey=\"mainCategoryName\" idKey=\"id\" hasCreateNew={false} />\n                </div>\n            </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default MainCategorySelector","import { useEffect, useState } from \"react\";\n\nimport * as postsCategoriesService from \"_services/postsCategories.service\";\nimport { useToast } from \"_contexts/ToastProvider\";\nimport useAuth from \"_hooks/useAuth\";\n\nconst usePostsCategories = () => {\n    const [categories, setCategories] = useState([]);\n    const [categoryData, setCategoryData] = useState([]);\n    const [fetchStatus, setFetchStatus] = useState('none');\n    const [isAllDataFetched, setAllDataFetched] = useState(false);\n\n    const { toast } = useToast()\n    const { logout } = useAuth();\n\n    const fetchPostCategoryByName = async (categorySlug) => {\n        try {\n            setFetchStatus('loading');\n            const categoryInfo = await postsCategoriesService.getPostsCategoryBySlug(categorySlug);\n            setCategoryData(categoryInfo);\n            setFetchStatus('success');\n            return categoryInfo;\n        } catch (error) {\n            setFetchStatus('failure');\n        }\n    }\n\n\n    const fetchPostCategories = async (filters) => {\n        const { limit } = filters || {};\n        try {\n            setFetchStatus('loading');\n            const categoriesData = await postsCategoriesService.getPostsCategories(filters);\n            // setCategories((previousData) => [...previousData, ...categoriesData]);\n            checkIfAllDataFetched(categoriesData, limit);\n            if (categoriesData.length === 0) {\n                setFetchStatus('empty');\n            } else {\n                setFetchStatus('success');\n                setTimeout(() => {\n                    // setFetchStatus('none');\n                }, 1000);\n            }\n            return categoriesData;\n        } catch (error) {\n            const { statusCode } = error || {};\n            if (statusCode === 401) {\n                logout();\n                setFetchStatus('unauthorised');\n            } else {\n                setFetchStatus('failure');\n            }\n        }\n    }\n\n\n    const fetchMyPostCategories = async (filters) => {\n        const { limit } = filters || {};\n        try {\n            setFetchStatus('loading');\n            const categoriesData = await postsCategoriesService.getAuthPostsCategories(filters);\n            // setCategories((previousData) => [...previousData, ...categoriesData]);\n            checkIfAllDataFetched(categoriesData, limit);\n            if (categoriesData.length === 0) {\n                setFetchStatus('empty');\n            } else {\n                setFetchStatus('success');\n                setTimeout(() => {\n                    // setFetchStatus('none');\n                }, 1000);\n            }\n            return categoriesData;\n        } catch (error) {\n            const { statusCode } = error || {};\n            if (statusCode === 401) {\n                logout();\n            }\n            setFetchStatus('failure');\n            throw error;\n        }\n    }\n\n    const checkIfAllDataFetched = (data, pageSize) => {\n        if (pageSize) {\n            setAllDataFetched(data.length === 0 || data.length % pageSize !== 0);\n        }\n    }\n\n    const createPostCategory = async (payload) => {\n        try {\n            const postsResponse = await postsCategoriesService.savePostCategory(payload);\n            // const newPostListForState = [...postsList, postsResponse];\n            // setPostsList(newPostListForState);\n            toast({\n                heading: 'Post Category created successfully!',\n                description: 'Your post Category is now in review, but will be approved by admin soon!',\n                options: { position: 'top-right' }\n            }).success()\n            // setCategories((previousData) => [postsResponse, ...previousData]);\n            return postsResponse;\n        } catch (error) {\n            const { message = 'Something went wrong' } = error || {};\n            throw message;\n        }\n    };\n\n    const savePostCategory = async (postCategoryPayload) => {\n        return createPostCategory(postCategoryPayload);\n    }\n\n    const deletePostCategory = async (id) => {\n        try {\n            const postsResponse = await postsCategoriesService.deletePostCategory(id);\n            toast({\n                heading: 'Post Category deleted successfully!',\n                description: 'Your post category has been successfully deleted!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message, statusCode } = error;\n            if (statusCode === 401) {\n                logout()\n            }\n            toast({\n                heading: 'Oops! There was an error deleting your post category.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            throw error;\n            // return false;\n        }\n    };\n\n    const restorePostCategory = async (id) => {\n        try {\n            const postsResponse = await postsCategoriesService.restorePostCategory(id);\n            toast({\n                heading: 'Post Category restored successfully!',\n                description: 'Your post category has been successfully restored!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message } = error;\n            toast({\n                heading: 'Oops! There was an error restoring your post category.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            throw error;\n            // return false;\n        }\n    };\n\n    return {\n        categoryData,\n        isAllDataFetched,\n\n        categories,\n        fetchStatus,\n\n        fetchMyPostCategories,\n        fetchPostCategories,\n        fetchPostCategoryByName,\n        savePostCategory,\n\n        deletePostCategory,\n        restorePostCategory\n    }\n}\n\nexport default usePostsCategories;","import * as postsCategories from '_api/postsCategories.api'\nimport { formatToLocalTime } from '_utils/timestampUtils';\n\nexport const formatPostCategoryData = (data) => {\n    const { category_name, category_slug, category_icon, posts_count, followers_count, created_at, full_name: created_by='Admin', user_name: createdUserName, category_id, is_following, verified } = data;\n    const formattedResponse = { id: category_id, categoryName: category_name, categorySlug: category_slug, categoryIcon: category_icon, followers: followers_count, posts: posts_count, createdUser: created_by, createdUserName, createdAt: formatToLocalTime(created_at), isFollowing: !!is_following, isVerified: !!Number(verified) };\n    return formattedResponse;\n}\n    \nexport const formatPostMainCategoryData = (data) => {\n    const { main_category_name, main_category_slug, created_at, main_category_id } = data;\n    const formattedResponse = { id: main_category_id, mainCategoryName: main_category_name, mainCategorySlug: main_category_slug, createdAt: formatToLocalTime(created_at) };\n    return formattedResponse;\n}\n\n\nexport const formatPostMainCategoryAndCategoryData = (data) => {\n    const { main_categories, ...categoryData } = data;\n    const categoryDataFormatted = formatPostCategoryData(categoryData);\n    const mainCategoryDataFormatted = main_categories.map(formatPostMainCategoryData);\n    const formattedResponse = { ...categoryDataFormatted, mainCategories: mainCategoryDataFormatted };\n    return formattedResponse;\n}\n\n\nconst getAuthPostsCategories = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.getAuthPostsCategories(data, config);\n        const { data: foldersData = [] } = response;\n        const foldersFormatted = foldersData.map(formatPostCategoryData)\n        return foldersFormatted || []\n    }catch(err){\n        throw err;\n    }\n}\n\nconst getAuthPostsCategoriesBySlug = async (data, config = {}) => {\n    const response = await postsCategories.getAuthPostsCategoryBySlug(data, config);\n    const { data: foldersData = [] } = response;\n    const foldersFormatted = formatPostMainCategoryAndCategoryData(foldersData);\n    return foldersFormatted || []\n}\n\nconst getMainPostsCategories = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.getMainPostsCategories(data, config);\n        const { data: foldersData = [] } = response;\n        const foldersFormatted = foldersData.map(formatPostMainCategoryData);\n        return foldersFormatted || []\n    }catch(err){\n        throw err;\n    }\n}\n\nconst getPostsCategories = async (data, config = {}) => {\n    try{\n\n        const response = await postsCategories.getPostsCategories(data, config);\n        const { data: foldersData = [] } = response;\n        const foldersFormatted = foldersData.map(formatPostCategoryData);\n        return foldersFormatted || []\n    }catch(err){\n        throw err;\n    }\n}\n\nconst getPostsCategoryBySlug = async (data, config = {}) => {\n    const response = await postsCategories.getPostsCategoryBySlug(data, config);\n    const { data: foldersData = [] } = response;\n    const foldersFormatted = formatPostCategoryData(foldersData);\n    return foldersFormatted || {}\n}\n\n\nconst followCategory = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.followCategory(data, config);\n        return true\n    }catch(err){\n        throw err;\n    }\n}\n\nconst unFollowCategory = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.unFollowCategory(data, config);\n        return true\n    }catch(err){\n        throw err;\n    }\n}\n\n\n// const getFolderById = async (id, config={}) => {\n//     const response = await folders.getFolderById(id, config)\n//     return response || []\n// }\n\n\nconst savePostCategory = async (data, config = {}) => {\n    try{\n        const response = await postsCategories.savePostCategory(data, config);\n        const { data: folderData = [] } = response;\n        const formattedFolderData = formatPostCategoryData(folderData);\n        return formattedFolderData;\n    }catch(err){\n        throw err;\n    }\n}\n\n\nconst updatePostCategory = async (data, id, config = {}) => {\n    try{\n        const response = await postsCategories.updatePostCategory(data, id, config);\n        const { data: folderData = [] } = response;\n        return formatPostCategoryData(folderData);\n    }catch(err){\n        throw err;\n    }\n}\n\n\nconst deletePostCategory = async (id, config = {}) => {\n    try{\n        const response = await postsCategories.deletePostCategory(id, config)\n        return response;\n    }catch(err){\n        throw err;\n    }  \n}\n\n\nconst restorePostCategory = async (id, config = {}) => {\n    try{\n        const response = await postsCategories.restorePostCategory(id, config)\n        return response;\n    }catch(err){\n        throw err;\n    }  \n}\n\n\n\nexport {\n    getMainPostsCategories,\n\n    getAuthPostsCategoriesBySlug,\n    getAuthPostsCategories,\n    getPostsCategories,\n    getPostsCategoryBySlug,\n\n    followCategory,\n    unFollowCategory,\n\n    savePostCategory,\n    updatePostCategory,\n    deletePostCategory,\n    restorePostCategory\n}","import { BASE_URL } from \"_constants\";\nimport { AccessAPI } from \"_utils\";\nimport { constructUrl } from \"_utils/AccessAPI\";\n\nconst getAuthPostsCategories = async (data, config = {}) => {\n    const postsURL = constructUrl(BASE_URL + 'postCategories/my', data);\n    return new AccessAPI(postsURL).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\n\nconst getAuthPostsCategoryBySlug = async (data, config = {}) => {\n    return new AccessAPI(`${BASE_URL}postCategories/my/${data}`).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err.response\n    })\n}\n\nconst getMainPostsCategories = async (data, config = {}) => {\n    const postsURL = constructUrl(BASE_URL + 'postMainCategories', data);\n    return new AccessAPI(postsURL).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\n\nconst getPostsCategories = async (data, config = {}) => {\n    const postsURL = constructUrl(BASE_URL + 'postCategories', data);\n    return new AccessAPI(postsURL).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst getPostsCategoryBySlug = async (data, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${data}`).get()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err.response\n    })\n}\n\nconst followCategory = async (categoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${categoryId}/follow`).post()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst unFollowCategory = async (categoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${categoryId}/unfollow`).post()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst savePostCategory = async (data, config = {}) => {\n    return new AccessAPI(BASE_URL + 'postCategories').post(data)\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst updatePostCategory = async (data, id, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${id}`).put(data)\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err.response\n    })\n}\n\nconst deletePostCategory = async (postCategoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${postCategoryId}`).delete()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nconst restorePostCategory = async (postCategoryId, config = {}) => {\n    return new AccessAPI(BASE_URL + `postCategories/${postCategoryId}/restore`).post()\n    .then((res) => {\n        return res\n    }).catch((err) => {\n        throw err\n    })\n}\n\nexport {\n    getMainPostsCategories,\n\n    getAuthPostsCategoryBySlug,\n    getAuthPostsCategories,\n    getPostsCategories,\n    getPostsCategoryBySlug,\n\n    followCategory,\n    unFollowCategory,\n\n    savePostCategory,\n    updatePostCategory,\n    deletePostCategory,\n    restorePostCategory\n}"],"names":["buttonCreateStateValues","none","loading","failure","completed","buttonUpdateStateValues","props","categoryModalData","onClose","status","data","onClick","id","categoryName","buttonStateValues","heading","concat","subHeading","selectedMainCategories","setSelectedMainCategories","useState","mainCategories","setMainCategories","newFolderName","setNewFolderName","buttonStatus","setButtonStatus","errorMessage","setErrorMessage","closeModal","useEscClose","useEffect","async","mainCategoriesData","postsCategoriesService","err","console","log","fetchMainCategories","_jsx","Dialog","isShown","hasOverlay","size","children","_jsxs","Card","variant","rounded","CardHeader","Typography","textVariant","CardContent","TextBox","type","labelName","placeholder","value","onChange","isFocused","validationMsg","messages","className","MainCategorySelector","selectedMainCategory","suggestions","Alerts","CardFooter","Button","width","handleCancelClick","selectedMainCategoriesIds","map","category","isValid","validatePostCategory","newCategoryPayload","category_name","main_category_ids","setTimeout","onCreate","textBoxProps","setValue","removeItem","index","slice","React","tag","mainCategoryName","tagItem","newTags","handleRemoveTag","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","length","handleRemoveAll","x1","x2","y1","y2","TextBoxWithSuggestions","onKeyDown","handleKeyDown","e","key","tagsSize","tagsWithoutLastOne","handleChange","onSuggestionClick","handleSuggestionClick","selectedValues","handleCreate","selectedOptions","labelKey","idKey","hasCreateNew","usePostsCategories","categories","setCategories","categoryData","setCategoryData","fetchStatus","setFetchStatus","isAllDataFetched","setAllDataFetched","toast","useToast","logout","useAuth","checkIfAllDataFetched","pageSize","fetchMyPostCategories","limit","filters","categoriesData","error","statusCode","fetchPostCategories","fetchPostCategoryByName","categoryInfo","categorySlug","savePostCategory","postsResponse","payload","description","options","position","success","message","createPostCategory","postCategoryPayload","deletePostCategory","restorePostCategory","formatPostCategoryData","category_slug","category_icon","posts_count","followers_count","created_at","full_name","created_by","user_name","createdUserName","category_id","is_following","verified","categoryIcon","followers","posts","createdUser","createdAt","formatToLocalTime","isFollowing","isVerified","Number","formatPostMainCategoryData","main_category_name","main_category_slug","main_category_id","mainCategorySlug","getAuthPostsCategories","response","postsURL","constructUrl","BASE_URL","AccessAPI","get","then","res","catch","postsCategories","foldersData","getAuthPostsCategoriesBySlug","foldersFormatted","main_categories","formatPostMainCategoryAndCategoryData","getMainPostsCategories","getPostsCategories","getPostsCategoryBySlug","followCategory","categoryId","post","unFollowCategory","folderData","updatePostCategory","put","postCategoryId","delete"],"sourceRoot":""}