{"version":3,"file":"static/js/272.a7710b5e.chunk.js","mappings":"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","sources":["_components/UI/Alerts/Alerts.js","_modules/help/HelpDialog.js","_modules/help/MyPostsHelp.js","_modules/modals/CategoryCreateModal.js","_modules/postCategories/_components/MainCategorySelector.js","_modules/posts/_components/PostCategory.js","_modules/posts/_components/PostVisibilitySelector.js","_modules/posts/_constants/postReducerActionTypes.js","_modules/posts/_constants/posts.js","_modules/posts/_hooks/usePostsReducer.js","_modules/posts/_hooks/useMyPosts.js","_modules/posts/_hooks/usePostsCategories.js","_modules/posts/_hooks/usePostsNavigation.js"],"sourcesContent":["import React from \"react\";\nimport './Alerts.css';\n\nconst alertColors = {\n    info: {\n        border: 'border-info',\n        text: 'text-info',\n    },\n    error: {\n        border: 'border-destructive',\n        text: 'text-destructive',\n    },\n}\n\nconst alertIcon = {\n    info: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-info\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"M12 16v-4\" /><path d=\"M12 8h.01\" /></svg>,\n    error: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-triangle-alert\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\" /><path d=\"M12 9v4\" /><path d=\"M12 17h.01\" /></svg>\n}\n\nconst Alerts = (props) => {\n    const { type = 'error', children } = props;\n\n    return (\n        <div className={`flex text-sm my-2 px-4 py-2 bg-default border-l ${alertColors[type].border} rounded-md`}>\n            <div className={`flex ${alertColors[type].text} items-center mr-2`}>\n                {alertIcon[type]}\n            </div>\n\n            <div className='flex flex-col'>\n                {children}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Alerts;","import React, { useState } from \"react\";\n\nimport Dialog from \"_components/UI/Dialog/Dialog\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport Separator from \"_components/Misc/Separator/Separator\";\n\nconst HelpDialog = (props) => {\n    const { title, children } = props;\n    const [isHelpInfoOpen, setIsHelpInfoOpen] = useState(null);\n\n    const openHelpInfo = () => {\n        setIsHelpInfoOpen(true);\n    }\n\n    const closeHelpInfo = () => {\n        setIsHelpInfoOpen(false);\n    }\n\n    if (!isHelpInfoOpen) {\n        return (\n            <span onClick={openHelpInfo} className=\"flex hover-text-info items-center cursor-pointer pl-2\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-info\"><circle cx=\"12\" cy=\"12\" r=\"10\" /><path d=\"M12 16v-4\" /><path d=\"M12 8h.01\" /></svg>\n            </span>\n        )\n    }\n\n    return (\n        <Dialog isShown={isHelpInfoOpen} hasOverlay size='xl'>\n\n            <div className=\"my-4\">\n                <div className=\"flex justify-between\">\n\n                    <Typography textVariant='h3' size='md' className='my-4 mx-4'>{title}</Typography>\n\n                    <button onClick={closeHelpInfo} type=\"button\" data-drawer-hide=\"drawer-example\" aria-controls=\"drawer-example\" className=\"text-default bg-transparent rounded-lg text-sm flex items-center justify-center mx-4\" >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-x\"><path d=\"M18 6 6 18\" /><path d=\"m6 6 12 12\" /></svg>\n                    </button>\n                </div>\n\n                <Separator className='my-2' />\n            </div>\n\n            <div className=\"mx-4 mb-4 py-4 text-sm\">\n\n                {children}\n\n            </div>\n\n        </Dialog>\n    )\n}\n\nexport default HelpDialog;","import React from \"react\";\n\nimport Separator from \"_components/Misc/Separator/Separator\";\nimport { Alerts } from '_components/UI';\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport HelpDialog from \"./HelpDialog\";\n\nimport { Link } from 'react-router-dom';\nimport CLIENT_ROUTES from '_routes/clientRoutes';\n\nconst MyPostsHelp = () => {\n\n    return (\n        <HelpDialog title='Help information about My Posts'>\n            <React.Fragment>\n\n                <div className=\"mb-4\">\n\n                    <Typography size='md' className='mb-2'>Posts Information:</Typography>\n\n                    <Typography textVariant='light' size='xs'>- Public Posts: These posts are visible to everyone and can be accessed by all users.</Typography>\n                    <Typography textVariant='light' size='xs'>- Private Posts: These posts are only visible to you until they are made public.</Typography>\n                </div>\n\n                \n                <Alerts type='info'>\n                    <Typography>Heads up!</Typography>\n                    <Typography textVariant='light' size='xs'>\n                        On list of posts created by you. The faded items are posts whose category has been created but not yet approved by the admin.\n                    </Typography>\n                </Alerts>\n\n                <Separator className='my-4' />\n\n                <div className=\"mb-4\">\n\n                    <Typography size='md' className='mb-2'>Create New Category Information:</Typography>\n\n                    <Typography textVariant='light' size='xs'>- When creating a new post, you can type in the name of your desired category in the category dropdown.</Typography>\n                    <Typography textVariant='light' size='xs'>- If no existing category matches your needs, you can create a new one.</Typography>\n                    <Typography textVariant='light' size='xs'>- The new category will be submitted for admin approval. Until it's approved, it will be <b>only visible to you</b>.</Typography>\n                </div>\n\n                <Alerts type='error'>\n                    <Typography>Important!</Typography>\n                    <Typography textVariant='light' size='xs'>\n                        Posts under unverified categories will only be visible on the home page and to users once the category is verified.\n                    </Typography>\n                    <Typography textVariant='light' size='xs'>\n                        You can check the status of the category in the <Link to={CLIENT_ROUTES.MY_CATEGORY} className='text-bold underline'>my category</Link> section.\n                    </Typography>\n                </Alerts>\n\n                <Separator className='my-4' />\n\n                <div className=\"mb-4\">\n\n<Typography size='md' className='mb-2'>Managing Categories:</Typography>\n\n<Typography textVariant='light' size='xs'>- You can create and manage your categories in the <Link to={CLIENT_ROUTES.MY_CATEGORY} className='text-bold underline'>MyCategories</Link> page.</Typography>\n</div>\n\n            </React.Fragment>\n\n        </HelpDialog>\n    )\n}\n\nexport default MyPostsHelp;","import React, { useEffect, useState } from \"react\";\n\nimport Dialog from \"_components/UI/Dialog/Dialog\";\nimport { Card, CardHeader, CardContent, CardFooter } from \"_components/Misc/Card/Card\";\nimport Typography from \"_components/Misc/Typography/Typography\";\nimport { Button, TextBox } from \"_components/Form\";\nimport Tags from \"_components/UI/Tags/Tags\";\n\nimport * as postsCategoriesService from \"_services/postsCategories.service\";\nimport MainCategorySelector from \"_modules/postCategories/_components/MainCategorySelector\";\nimport { Alerts } from \"_components/UI\";\n\nconst buttonCreateStateValues = {\n    none: 'Create',\n    loading: 'Creating',\n    failure: 'Failed',\n    completed: 'Created',\n}\n\nconst buttonUpdateStateValues = {\n    none: 'Update',\n    loading: 'Updating',\n    failure: 'Failed',\n    completed: 'Updated',\n}\n\nconst CategoryCreateModal = (props) => {\n    const { categoryModalData, onClose = () => { } } = props;\n    const { status, data = {}, onClick } = categoryModalData || {};\n    const { id, categoryName = '' } = data;\n\n    const buttonStateValues = id ? buttonUpdateStateValues : buttonCreateStateValues;\n    const heading = `${id ? 'Update Category' : 'Create Category'}`;\n    const subHeading = `Are you sure you want to ${id ? `update the category` : 'create a new category'}?`;\n\n    const [selectedMainCategories, setSelectedMainCategories] = useState([]);\n    const [mainCategories, setMainCategories] = useState([]);\n\n    const [newFolderName, setNewFolderName] = useState(categoryName);\n    const [buttonStatus, setButtonStatus] = useState('none');\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const closeModal = () => {\n        onClose();\n        setNewFolderName('');\n    }\n\n    const handleCancelClick = () => {\n        closeModal();\n    }\n\n    const validatePostCategory = (categoryName) => {\n        if (!categoryName) {\n            setErrorMessage('Please enter a category name');\n            return false;\n        }\n        setErrorMessage('');\n        return true;\n    }\n\n    const handleMainCategorySelect = (selectedMainCategory) => {\n        setSelectedMainCategories(selectedMainCategory);\n    }\n\n    const handleSubmitClick = async () => {\n        const selectedMainCategoriesIds = selectedMainCategories.map((category) => category.id);\n        const isValid = validatePostCategory(newFolderName);\n        const newCategoryPayload = {\n            category_name: newFolderName,\n            main_category_ids: selectedMainCategoriesIds\n        };\n        if (!isValid) {\n            return\n        }\n        if (onClick) {\n            setButtonStatus('loading');\n            try {\n                await onClick(newCategoryPayload, id);\n                setButtonStatus('completed');\n                setTimeout(() => {\n                    closeModal();\n                }, 1000);\n            } catch (err) {\n                setButtonStatus('failure');\n                setErrorMessage(err);\n            } finally {\n                setTimeout(() => {\n                    setButtonStatus('none');\n                }, 1000)\n            }\n            return;\n        }\n        closeModal();\n    }\n\n    useEffect(() => {\n        setNewFolderName(categoryName)\n    }, [categoryName])\n\n\n    useEffect(() => {\n        const fetchMainCategories = async () => {\n            try {\n                const mainCategoriesData = await postsCategoriesService.getMainPostsCategories();\n                setMainCategories(mainCategoriesData);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        fetchMainCategories();\n    }, [])\n\n\n\n    if (!status) {\n        return null;\n    }\n\n    return (\n        <Dialog isShown hasOverlay size='lg' >\n            <Card variant='ghost' rounded='lg'>\n                <CardHeader>\n                    <Typography size='lg'>{heading}</Typography>\n                    <Typography size='xs' textVariant='default'>{subHeading}</Typography>\n                    {id ? <Typography size='xs' textVariant='bold'>{categoryName}</Typography> : null}\n                </CardHeader>\n\n                <CardContent>\n                    <TextBox\n                        type='text'\n                        labelName='New category name'\n                        placeholder=\"Enter category name\"\n                        value={newFolderName}\n                        onChange={setNewFolderName}\n                        size='sm'\n                        isFocused\n                        validationMsg={{\n                            type: 'error',\n                            messages: [errorMessage]\n                        }}\n                    />\n\n                    <div className=\"my-3\">\n                        <MainCategorySelector mainCategories={selectedMainCategories} onChange={handleMainCategorySelect} suggestions={mainCategories} />\n                        {/* <Tags textBoxFieldProps={{ size: 'sm', placeholder: 'Choose tags (press Enter to add)' }} tags={[]} onChange={()=>{}} suggestions={mainCategories} /> */}\n                    </div>\n\n                    <Alerts type='info'>\n                    <Typography textVariant='light' size='xs'>- While creating a new category, please verify the main categories/tags below.</Typography>\n                    <Typography textVariant='light' size='xs'>- This ensures your category and posts can be easily found in user suggestions and properly grouped for processing.</Typography>\n                    \n                        </Alerts>\n                   \n                </CardContent>\n\n                <CardFooter className='p-0 flex justify-between'>\n                    <Button size='xs' width='none' variant='custom' onClick={handleCancelClick}>Cancel</Button>\n                    <Button size='xs' width='none' variant='accent' onClick={handleSubmitClick} buttonStatus={buttonStatus}>\n                        {buttonStateValues[buttonStatus]}\n                    </Button>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}\n\nexport default CategoryCreateModal;","import React, { useState } from \"react\"\n\nimport TextBoxWithSuggestions from \"_components/UI/TextBoxWithSuggestions/TextBoxWithSuggestions\";\n\nconst MainCategorySelector = (props) => {\n    const { mainCategories = [], suggestions=[], onChange = () => { }, onCreate = () => { }, className, ...textBoxProps } = props;\n    const extraProps = {\n        placeholder: 'Type and press Enter to select',\n        labelName: 'Related Tags',\n    }\n\n    const [value, setValue] = useState('')\n\n    const removeItem = (index) => {\n        const newTags = mainCategories.slice(0, index).concat(mainCategories.slice(index + 1))\n        return newTags\n    }\n\n\n    const handleRemoveTag = (index) => {\n        const newTags = removeItem(index)\n        onChange(newTags)\n    }\n\n    const handleRemoveAll = () => {\n        onChange([])\n        // focus to textbox\n    }\n\n    const handleKeyDown = (value, e) => {\n        if (e.key === 'Enter') {\n            if (!value) { return }\n            setValue('')\n            onCreate(value)\n        }\n\n        if (e.key === 'Backspace' && value.length === 0) {\n            const tagsSize = mainCategories.length\n            const tagsWithoutLastOne = removeItem(tagsSize - 1)\n            onChange(tagsWithoutLastOne)\n        }\n    }\n\n    const handleChange = (value, e) => {\n        setValue(value)\n    }\n\n    const handleSuggestionClick = (id, selectedValues) => {\n        onChange(selectedValues)\n        // setValue('')\n    }\n\n    const handleCreate = (value, selectedValues) => {\n        // alert('Create')\n        onCreate(value)\n        setValue('')\n    }\n\n    return (\n        <React.Fragment>\n            <div>\n            <div className={`flex max-w-mds justify-ends text-default  ${className}`}>\n                {mainCategories.map((tag, index) => {\n                    const { mainCategoryName: tagItem } = tag;\n                    return (\n                    <div key={index} className=\"flex bg-custom mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"mx-1 px-2 py-1\">#{tagItem}</span>\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={() => handleRemoveTag(index)}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-x\"><path d=\"M18 6 6 18\" /><path d=\"m6 6 12 12\" /></svg>\n                        </span>\n                    </div>\n                )})}\n                {mainCategories.length > 2 && (\n                    <div className=\"flex mx-1 my-1 text-xs rounded-md\">\n                        <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-destructive hover-text-custom\" onClick={handleRemoveAll}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-delete\"><path d=\"M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\" /><line x1=\"18\" x2=\"12\" y1=\"9\" y2=\"15\" /><line x1=\"12\" x2=\"18\" y1=\"9\" y2=\"15\" /></svg>\n                        </span>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex justify-ends\">\n                <div className=\"min-w-md\">\n                    <TextBoxWithSuggestions {...extraProps} {...textBoxProps} onKeyDown={handleKeyDown} onChange={handleChange} onSuggestionClick={handleSuggestionClick} onCreate={handleCreate} value={value} selectedOptions={mainCategories} suggestions={suggestions} labelKey=\"mainCategoryName\" idKey=\"id\" hasCreateNew={false} />\n                </div>\n            </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default MainCategorySelector","import React, { useState, useEffect, useMemo } from \"react\";\n\nimport Combobox, { ComboboxContent, ComboboxTrigger } from \"_components/UI/Combobox/Combobox\";\nimport usePostsCategories from \"../_hooks/usePostsCategories\";\nimport CategoryCreateModal from \"_modules/modals/CategoryCreateModal\";\nimport useDebounce from \"_hooks/useDebounce\";\n\nconst pageSize = 30;\n\nconst PostCategory = ({ category, categoryList_arg, onChange = () => { }, hasAddOption = true }) => {\n    const { savePostCategory, fetchMyPostCategories, fetchStatus: categoryFetchStatus, isAllDataFetched, categories: categoryList } = usePostsCategories();\n\n    const [filters, setFilters] = useState({ filters: 'explore', verified: 'all', limit: pageSize, page: 1 });\n    const [selectedCategory, setSelectedCategory] = useState(category);\n    const [data, setData] = useState([]);\n\n    const { id, categoryName: label = 'Select a category' } = useMemo(() => selectedCategory || {}, [selectedCategory]);\n\n    const [newCategoryModalData, setNewCategoryModalData] = useState(null);\n    const debounce = useDebounce();\n\n    const handlePostCategoryChange = (id, category) => {\n        const { categorySlug = '' } = category || {};\n        setSelectedCategory(category);\n        onChange(id, category, categorySlug);\n    }\n\n    const handleFetchPostCategories = async (newFilters = []) => {\n        const usersFilter = { ...filters, ...newFilters };\n        try {\n            const users = await fetchMyPostCategories(usersFilter);\n            setData((previousUsers) => [...previousUsers, ...users]);\n            setFilters((previousFilters) => ({ ...previousFilters, page: previousFilters.page + 1 }));\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const handleSavePostCategory = async (categoryData) => {\n        try {\n        const newCategoryData = await savePostCategory(categoryData);\n        setData((previousUsers) => [...previousUsers, newCategoryData]);\n        setSelectedCategory(newCategoryData);\n        onChange(newCategoryData.id, newCategoryData);\n        }catch (err) {\n            console.error(err);\n            throw err;\n        }\n    }\n\n    const handleSearchQuery = async (value) => {\n        // setFilters({ ...filters, page: 1 });\n        const usersFilter = { ...filters, ...{ search: value, page: 1 } };\n        try{\n\n            const users = await fetchMyPostCategories(usersFilter);\n            setData(users);\n            setFilters((previousFilters) => ({ ...previousFilters, page: 2 }));\n        }catch(err){\n            console.error(err);\n        }\n\n        // handleFetchPostCategories({ search: value, page: 1 });\n    }\n\n    const handleOpenCategoryCreateModal = (categoryNameInput) => {\n        const categoryName = typeof categoryNameInput === 'string' ? categoryNameInput : '';\n        const dialogData = {\n            data: { categoryName },\n            status: true,\n            onClick: handleSavePostCategory\n        }\n        setNewCategoryModalData(dialogData)\n    }\n\n    const handleCloseCategoryModal = () => {\n        setNewCategoryModalData(null);\n    }\n\n    useEffect(() => {\n        handleFetchPostCategories();\n    }, [])\n\n\n    return (\n        <React.Fragment>\n            <Combobox key={`${id}_${label}`} >\n                {/* {categoryFetchStatus === 'loading' ? (\n                <span>Loading...</span>\n            ) : ( */}\n                <ComboboxTrigger>\n                    <span className='flex mx-1 items-center text-secondary cursor-pointer'>\n                        <span className=''>{label}</span>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"14\" height=\"14\" fill=\"currentColor\"><path d=\"M18 9 12 3 6 9H18ZM18 15 12 21 6 15H18Z\"></path></svg>\n                    </span>\n                </ComboboxTrigger>\n                {/* )} */}\n\n                {/* {categoryFetchStatus === 'success' && ( */}\n                <ComboboxContent\n                    heading='Select a category'\n                    options={data}\n                    onChange={handlePostCategoryChange}\n                    isFetching={categoryFetchStatus === 'loading'}\n                    isAllDataFetched={isAllDataFetched}\n                    onNewOptions={handleFetchPostCategories}\n                    onSearch={debounce(handleSearchQuery, 500)}\n                    renderAdd={hasAddOption ? (searchQuery) => {\n                        if (!searchQuery) {\n                            return;\n                        }\n                        return <span className=\"block w-full\" onClick={() => handleOpenCategoryCreateModal(searchQuery)}>Create new \"{searchQuery}\"</span>\n                    } : () => { }}\n                    selectedValue={id}\n                    idKey='id'\n                    labelKey='categoryName'\n                    isSpecialKey='isVerified'\n                />\n                {!!id && <span className=\"flex items-center text-bold rounded-md cursor-pointer px-1 hover-text-destructive\" onClick={() => handlePostCategoryChange('',)}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-delete\"><path d=\"M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z\" /><line x1=\"18\" x2=\"12\" y1=\"9\" y2=\"15\" /><line x1=\"12\" x2=\"18\" y1=\"9\" y2=\"15\" /></svg>\n                </span>}\n                {/* )} */}\n            </Combobox>\n\n            {!!newCategoryModalData && <CategoryCreateModal onClose={handleCloseCategoryModal} categoryModalData={newCategoryModalData} />}\n        </React.Fragment>\n    )\n}\n\nexport default PostCategory;","import React from \"react\";\n\nimport ModeSelector from \"_components/UI/ModeSelector/ModeSelector\";\n\nimport { VISIBILITY_MODES, visibilityModes } from \"../_constants/posts\";\n\n\nconst PostVisibilitySelector = ({ currentMode, onChange }) => {\n\n    return (\n        <ModeSelector modes={visibilityModes} onChange={onChange} selectedValue={currentMode} renderLabel />\n\n    )\n}\n\nexport default PostVisibilitySelector;","export const POST_ACTIONS = {\n    SET_FIELDS: 'SET_FIELDS',\n    SET_TAGS: 'SET_TAGS',\n    SET_VISIBILITY: 'SET_VISIBILITY',\n    SET_CONTENT: 'SET_CONTENT',\n    SET_TITLE: 'SET_TITLE',\n    SET_CATEGORY: 'SET_CATEGORY',\n    RESET_FORM: 'RESET_FORM',\n};\n","export const VISIBILITY_MODES = {\n    private: 'private',\n    public: 'public'\n}\n\nexport const visibilityModes = [\n    { id: VISIBILITY_MODES.private, label: 'Private', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-eye-off\"><path d=\"M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49\"/><path d=\"M14.084 14.158a3 3 0 0 1-4.242-4.242\"/><path d=\"M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143\"/><path d=\"m2 2 20 20\"/></svg> },\n    { id: VISIBILITY_MODES.public, label: 'Public', modeElement: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-eye\"><path d=\"M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg> },\n]\n\nexport const EMPTY_POST_TITLE = 'My First Post';","import { VISIBILITY_MODES, EMPTY_POST_TITLE } from \"../_constants/posts\";\nimport { POST_ACTIONS } from \"../_constants/postReducerActionTypes\";\n\nexport const initialState = {\n    postTags: [],\n    currentVisibilityMode: VISIBILITY_MODES.public,\n    postTitle: EMPTY_POST_TITLE,\n    postCategory: null,\n    markdownContent: '',\n};\n\n\nconst postFormReducer = (state, { type, payload }) => {\n    switch (type) {\n        case POST_ACTIONS.SET_FIELDS:\n            return { ...state, ...payload };\n        case POST_ACTIONS.SET_TAGS:\n            return { ...state, postTags: payload };\n        case POST_ACTIONS.SET_VISIBILITY:\n            return { ...state, currentVisibilityMode: payload };\n        case POST_ACTIONS.SET_CONTENT:\n            return { ...state, markdownContent: payload };\n        case POST_ACTIONS.SET_TITLE:\n            return { ...state, postTitle: payload };\n        case POST_ACTIONS.SET_CATEGORY:\n            return { ...state, postCategory: payload };\n        case POST_ACTIONS.RESET_FORM:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\nexport default postFormReducer\n","import { useState, useEffect, useContext, useCallback, useReducer } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, useSearchParams } from \"react-router-dom\";\n\nimport * as posts from \"_services/posts.service\";\nimport * as postsService from '_services/posts.service';\nimport * as categoriesService from '_services/postsCategories.service';\n\nimport postFormReducer, { initialState } from \"./usePostsReducer\";\nimport { PostsContext } from \"_contexts/PostsContext\";\nimport { POST_ACTIONS } from \"../_constants/postReducerActionTypes\";\nimport { useToast } from \"_contexts/ToastProvider\";\nimport { getUserDetailsOfCurrentUser } from \"_utils/userAuth\";\nimport useAuth from \"_hooks/useAuth\";\n\nconst useMyPosts = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const { id: postSlug } = useParams();\n    // const { postDetails, postsList, categoriesList: postsCategoriesList, selectedCategory, setSelectedCategory, setPostsList } = useContext(PostsContext);\n    const { toast } = useToast()\n    const { logout } = useAuth();\n\n    // const selectedCategory = searchParams.get('category');\n    const [postFormState, postFormDispatcher] = useReducer(postFormReducer, { ...initialState });\n    // const [postFormState, postFormDispatcher] = useReducer(postFormReducer, { ...initialState, postCategory: selectedCategory });\n    const [fetchStatus, setFetchStatus] = useState('none');\n\n    const fetchMyPostsData = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const postsData = await postsService.getAuthPosts(filters);\n            if(postsData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n                setTimeout(() => {\n                    setFetchStatus('none');\n                }, 1000);\n            }\n            return postsData;\n        }catch(error){\n            const { statusCode } = error;\n            if(statusCode === 401){\n                logout()\n            }\n            setFetchStatus('failure');\n            throw error;\n        }\n    }\n\n    const fetchCategoriesData = async (filters) => {\n        try{\n            setFetchStatus('loading');\n            const categoriesData = await categoriesService.getPostsCategories();\n            setFetchStatus('success');\n            setTimeout(() => {\n                setFetchStatus('none');\n            }, 1000);\n            return categoriesData;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    };\n\n\n    const createPost = useCallback(async (payload) => {\n        try {\n            const postsResponse = await posts.savePost(payload);\n            // const newPostListForState = [...postsList, postsResponse];\n            // setPostsList(newPostListForState);\n            toast({\n                heading: 'Post created successfully!',\n                description: 'Your post has been successfully published!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message, statusCode } = error;\n            if(statusCode === 401){\n                logout()\n            }\n            toast({\n                heading: 'Oops! There was an error creating your post.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            return false;\n        }\n    }, []);\n\n    const updatePost = useCallback(async (payload, id) => {\n        try {\n            const postsResponse = await posts.updatePost(payload, id);\n            // const newPostListForState = postsList.map(item => {\n            //     if (item.id === id) {\n            //         return { id, ...postsResponse };\n            //     }\n            //     return item;\n            // });\n            // setPostsList(newPostListForState);\n            toast({\n                heading: 'Post updated successfully!',\n                description: 'Your post has been successfully updated!',\n                options: { position: 'top-right' }\n            }).success()\n            return postsResponse;\n        } catch (error) {\n            const { message } = error;\n            toast({\n                heading: 'Oops! There was an error updating your post.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            return false;\n        }\n    }, []);\n\n    const deletePost = useCallback(async (id) => {\n        // yet to implement\n    }, []);\n\n\n    const validatePostForm = (postPayload) => {\n        const { postTags, currentVisibilityMode, postCategory, postTitle, markdownContent } = postPayload;\n        if (!postCategory) {\n            return [true, 'Category is missing'];\n        }\n        if (!currentVisibilityMode) {\n            return [true, 'Post Visibility Mode is missing'];\n        }\n        if (!postTitle) {\n            return [true, 'Post Title is missing'];\n        }\n        if (!markdownContent) {\n            return [true, 'Post content is missing'];\n        }\n\n        return [false, ''];\n    }\n\n\n    const savePost = async () => {\n        const [error, message] = validatePostForm(postFormState);\n        if(error){\n            toast({\n                heading: 'Oops! Please verify the changes.',\n                description: message,\n                options: { position: 'top-right' }\n            }).error()\n            return;\n        }\n\n        const { postId, postTags, currentVisibilityMode, postCategory, postTitle, markdownContent } = postFormState;\n\n        // validate\n\n        const postPayload = {\n            category: postCategory.id,\n            content: markdownContent,\n            post_title: postTitle,\n            visibility: currentVisibilityMode\n        }\n        return postSlug ? updatePost(postPayload, postId) : createPost(postPayload);\n    }\n\n\n    useEffect(() => {\n        if (!postSlug) {\n            return\n        }\n\n        const fetchUsersPostItem = async () => {\n            const { userName } = getUserDetailsOfCurrentUser();\n            try {\n\n                setFetchStatus('loading');\n                const usersPostData = await postsService.getPostBySlug({ userName, postSlug });\n                const { id: postId, category, content, postTitle, visibility, user } = usersPostData || {};\n                const { categoryId, categoryName } = category || {};\n                const { fullName, avatar } = user || {};\n\n                const payload = { postId, markdownContent: content, postTitle, currentVisibilityMode: visibility, postCategory: { id: categoryId, categoryName, value: categoryId } };\n\n                postFormDispatcher({ type: POST_ACTIONS.SET_FIELDS, payload });\n\n                setFetchStatus('success');\n            } catch (error) {\n                setFetchStatus('failure');\n            }\n        }\n\n        fetchUsersPostItem();\n    }, [postSlug])\n\n    return {\n        // postDetails,\n        // selectedCategory,\n        // setSelectedCategory,\n        // posts: postsList,\n        // categories: postsCategoriesList,\n        fetchCategoriesData,\n        fetchMyPostsData,\n\n        savePost,\n        deletePost,\n        \n        postFormState,\n        postFormDispatcher,\n        fetchStatus\n    };\n}\n\nexport default useMyPosts;","import { useEffect, useState } from \"react\";\n\nimport * as postsCategoriesService from \"_services/postsCategories.service\";\nimport { useToast } from \"_contexts/ToastProvider\";\nimport useAuth from \"_hooks/useAuth\";\n\nconst usePostsCategories = () => {\n    const [categories, setCategories] = useState([]);\n    const [categoryData, setCategoryData] = useState([]);\n    const [fetchStatus, setFetchStatus] = useState('none');\n    const [isAllDataFetched, setAllDataFetched] = useState(false);\n\n    const { toast } = useToast()\n    const { logout } = useAuth();\n\n    const fetchPostCategoryByName = async (categorySlug) => {\n        try{\n            setFetchStatus('loading');\n            const categoryInfo = await postsCategoriesService.getPostsCategoryBySlug(categorySlug);\n            setCategoryData(categoryInfo);\n            setFetchStatus('success');\n            return categoryInfo;\n        }catch(error){\n            setFetchStatus('failure');\n        }\n    }\n\n\n    const fetchPostCategories = async (filters) => {\n        const { limit } = filters || {};\n        try{\n            setFetchStatus('loading');\n            const categoriesData = await postsCategoriesService.getPostsCategories(filters);\n            // setCategories((previousData) => [...previousData, ...categoriesData]);\n            checkIfAllDataFetched(categoriesData, limit);\n            if(categoriesData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n                setTimeout(() => {\n                    // setFetchStatus('none');\n                }, 1000);\n            }\n            return categoriesData;\n        }catch(error){\n            const { statusCode } = error || {};\n            if(statusCode === 401){\n                setFetchStatus('unauthorised');\n            }else{\n                setFetchStatus('failure');\n            }\n        }\n    }\n\n\n    const fetchMyPostCategories = async (filters) => {\n        const { limit } = filters || {};\n        try{\n            setFetchStatus('loading');\n            const categoriesData = await postsCategoriesService.getAuthPostsCategories(filters);\n            // setCategories((previousData) => [...previousData, ...categoriesData]);\n            checkIfAllDataFetched(categoriesData, limit);\n            if(categoriesData.length === 0){\n                setFetchStatus('empty');\n            }else{\n                setFetchStatus('success');\n                setTimeout(() => {\n                    // setFetchStatus('none');\n                }, 1000);\n            }\n            return categoriesData;\n        }catch(error){\n            const { statusCode } = error || {};\n            if(statusCode === 401){\n                logout();\n                return;\n            }\n            setFetchStatus('failure');\n        }\n    }\n\n    const checkIfAllDataFetched = (data, pageSize) => {\n        if(pageSize){\n            setAllDataFetched(data.length === 0 || data.length % pageSize !== 0);\n        }\n    }\n\n    const createPostCategory = async (payload) => {\n        try {\n            const postsResponse = await postsCategoriesService.savePostCategory(payload);\n            // const newPostListForState = [...postsList, postsResponse];\n            // setPostsList(newPostListForState);\n            toast({\n                heading: 'Post Category created successfully!',\n                description: 'Your post Category is now in review, but will be approved by admin soon!',\n                options: { position: 'top-right' }\n            }).success()\n            // setCategories((previousData) => [postsResponse, ...previousData]);\n            return postsResponse;\n        } catch (error) {\n            const { message='Something went wrong' } = error || {};\n            throw message;\n        }\n    };\n\n    const savePostCategory = async (postCategoryPayload) => {\n        return createPostCategory(postCategoryPayload);\n    }\n\n    return {\n        categoryData,\n        isAllDataFetched,\n\n        categories,\n        fetchStatus,\n\n        fetchMyPostCategories,\n        fetchPostCategories,\n        fetchPostCategoryByName,\n        savePostCategory\n    }\n}\n\nexport default usePostsCategories;","import { useNavigate } from \"react-router-dom\";\n\nconst usePostsNavigation = () => {\n    const navigate = useNavigate();\n\n    const navigateToList = () => {\n        navigate(\"/my/posts\");\n    }\n    const navigateToCreate = () => {\n        navigate(\"create\");\n    }\n    const navigateToEdit = (id) => {\n        navigate(\"edit/\" + id);\n    }\n\n    return {\n        navigateToList,\n        navigateToCreate,\n        navigateToEdit\n    }\n}\n\nexport default usePostsNavigation"],"names":["alertColors","info","border","text","error","alertIcon","_jsxs","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","children","_jsx","cx","cy","r","d","props","type","concat","title","isHelpInfoOpen","setIsHelpInfoOpen","useState","openHelpInfo","Dialog","isShown","hasOverlay","size","Typography","textVariant","onClick","closeHelpInfo","Separator","MyPostsHelp","HelpDialog","React","Alerts","Link","to","CLIENT_ROUTES","MY_CATEGORY","buttonCreateStateValues","none","loading","failure","completed","buttonUpdateStateValues","categoryModalData","onClose","status","data","id","categoryName","buttonStateValues","heading","subHeading","selectedMainCategories","setSelectedMainCategories","mainCategories","setMainCategories","newFolderName","setNewFolderName","buttonStatus","setButtonStatus","errorMessage","setErrorMessage","closeModal","useEffect","async","mainCategoriesData","postsCategoriesService","err","console","log","fetchMainCategories","Card","variant","rounded","CardHeader","CardContent","TextBox","labelName","placeholder","value","onChange","isFocused","validationMsg","messages","MainCategorySelector","selectedMainCategory","suggestions","CardFooter","Button","handleCancelClick","selectedMainCategoriesIds","map","category","isValid","validatePostCategory","newCategoryPayload","category_name","main_category_ids","setTimeout","onCreate","textBoxProps","setValue","removeItem","index","slice","tag","mainCategoryName","tagItem","newTags","handleRemoveTag","length","handleRemoveAll","x1","x2","y1","y2","TextBoxWithSuggestions","onKeyDown","handleKeyDown","e","key","tagsSize","tagsWithoutLastOne","handleChange","onSuggestionClick","handleSuggestionClick","selectedValues","handleCreate","selectedOptions","labelKey","idKey","hasCreateNew","_ref","categoryList_arg","hasAddOption","savePostCategory","fetchMyPostCategories","fetchStatus","categoryFetchStatus","isAllDataFetched","categories","categoryList","usePostsCategories","filters","setFilters","verified","limit","page","selectedCategory","setSelectedCategory","setData","label","useMemo","newCategoryModalData","setNewCategoryModalData","debounce","useDebounce","handlePostCategoryChange","categorySlug","handleFetchPostCategories","newFilters","arguments","undefined","usersFilter","users","previousUsers","previousFilters","handleSavePostCategory","newCategoryData","categoryData","Combobox","ComboboxTrigger","ComboboxContent","options","isFetching","onNewOptions","onSearch","search","renderAdd","searchQuery","categoryNameInput","selectedValue","isSpecialKey","CategoryCreateModal","handleCloseCategoryModal","currentMode","ModeSelector","modes","visibilityModes","renderLabel","POST_ACTIONS","SET_FIELDS","SET_TAGS","SET_VISIBILITY","SET_CONTENT","SET_TITLE","SET_CATEGORY","RESET_FORM","VISIBILITY_MODES","private","public","modeElement","EMPTY_POST_TITLE","initialState","postTags","currentVisibilityMode","postTitle","postCategory","markdownContent","postFormReducer","state","payload","useMyPosts","searchParams","setSearchParams","useSearchParams","postSlug","useParams","toast","useToast","logout","useAuth","postFormState","postFormDispatcher","useReducer","setFetchStatus","createPost","useCallback","postsResponse","posts","description","position","success","message","statusCode","updatePost","deletePost","userName","getUserDetailsOfCurrentUser","usersPostData","postsService","postId","content","visibility","user","categoryId","fullName","avatar","fetchUsersPostItem","fetchCategoriesData","categoriesData","categoriesService","fetchMyPostsData","postsData","savePost","postPayload","validatePostForm","post_title","setCategories","setCategoryData","setAllDataFetched","checkIfAllDataFetched","pageSize","fetchPostCategories","fetchPostCategoryByName","categoryInfo","createPostCategory","postCategoryPayload","usePostsNavigation","navigate","useNavigate","navigateToList","navigateToCreate","navigateToEdit"],"sourceRoot":""}